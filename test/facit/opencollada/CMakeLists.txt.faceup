
«k:if»(«D:${»«v:CMAKE_SOURCE_DIR»«D:}» «t:STREQUAL» «D:${»«v:CMAKE_BINARY_DIR»«D:}»)
	«k:if»(«t:NOT» «t:DEFINED» «v:WITH_IN_SOURCE_BUILD»)
		«f:message»(«t:FATAL_ERROR»
			«s:"CMake generation for OpenCollada is not allowed within the source directory!"»
			«s:"\n Remove the CMakeCache.txt file and try again from another folder, e.g.:"»
			«s:"\n "»
			«s:"\n rm CMakeCache.txt"»
			«s:"\n cd .."»
			«s:"\n mkdir cmake-make"»
			«s:"\n cd cmake-make"»
			«s:"\n cmake ../opencollada"»
			«s:"\n "»
			«s:"\n Alternately define WITH_IN_SOURCE_BUILD to force this option (not recommended!)"»
		)
	«k:endif»()
«k:endif»()

«f:cmake_minimum_required»(«t:VERSION» 2.6)


«x:#-----------------------------------------------------------------------------
# Set policy.
»
«x:# see "cmake --help-policy CMP0003"
# So library linking is more sane
»«f:cmake_policy»(«t:SET» «c:CMP0003» «t:NEW»)

«x:# So defines are automatically quoted
»«f:cmake_policy»(«t:SET» «c:CMP0005» «t:NEW»)

«x:# So syntax problems are errors
»«f:cmake_policy»(«t:SET» «c:CMP0010» «t:NEW»)

«x:# Input directories must have CMakeLists.txt
»«f:cmake_policy»(«t:SET» «c:CMP0014» «t:NEW»)

«x:# avoid having empty buildtype
»«f:set»(«v:CMAKE_BUILD_TYPE_INIT» «s:"Release"»)

«f:list»(«t:APPEND» «v:CMAKE_MODULE_PATH» «s:"${«v:CMAKE_SOURCE_DIR»}/Externals/cmake-modules"»)
«f:set»(«v:CMAKE_CONFIGURATION_TYPES» «s:"Debug;Release"» «t:CACHE» «t:STRING» «s:"Only do Release and Debug"» «t:FORCE» )
«f:mark_as_advanced»(«v:CMAKE_CONFIGURATION_TYPES»)


«x:#-----------------------------------------------------------------------------
# Macro's
»
«k:macro»(«f:opencollada_add_lib»
	«v:name»
	«v:sources»
	«v:target_libs»
	)

	«f:link_directories»(«D:${»«v:LIBRARY_OUTPUT_PATH»«D:}»)

	«k:if» («v:USE_STATIC»)
		«f:add_library»(«D:${»«v:name»«D:}»«c:_static» «t:STATIC» «D:${»«v:sources»«D:}»)
		«f:set_target_properties»(«D:${»«v:name»«D:}»«c:_static» «t:PROPERTIES» «c:OUTPUT_NAME» «D:${»«v:name»«D:}»)
		«f:target_link_libraries»(«D:${»«v:name»«D:}»«c:_static» «D:${»«v:target_libs»«D:}»)
		«f:set»(«v:CMAKE_REQUIRED_LIBRARIES» «s:"${«v:name»}_static;${«v:CMAKE_REQUIRED_LIBRARIES»}"» «t:PARENT_SCOPE»)

		«f:install»(
			«t:TARGETS» «D:${»«v:name»«D:}»«c:_static»
			«t:ARCHIVE» «t:DESTINATION» «D:${»«v:OPENCOLLADA_INST_LIBRARY»«D:}»
		)
	«k:endif» ()

	«k:if» («v:USE_SHARED»)
		«k:if» («t:NOT» «v:UNIX»)
			«f:message»(«D:${»«v:name»«D:}» «s:" WARNING: Shared library support implemented for UNIX-like OS only"»)
		«k:endif» ()
		«f:add_library»(«D:${»«v:name»«D:}»«c:_shared» «t:SHARED» «D:${»«v:sources»«D:}»)
		«f:set_target_properties»(«D:${»«v:name»«D:}»«c:_shared» «t:PROPERTIES» «c:OUTPUT_NAME» «D:${»«v:name»«D:}»)
		«f:target_link_libraries»(«D:${»«v:name»«D:}»«c:_shared» «D:${»«v:target_libs»«D:}»)
		«f:set»(«v:CMAKE_REQUIRED_LIBRARIES» «s:"${«v:name»}_shared;${«v:CMAKE_REQUIRED_LIBRARIES»}"»  «t:PARENT_SCOPE»)

		«f:install»(
			«t:TARGETS» «D:${»«v:name»«D:}»«c:_shared»
			«t:LIBRARY» «t:DESTINATION» «D:${»«v:OPENCOLLADA_INST_LIBRARY»«D:}»
		)
	«k:endif» ()
«k:endmacro»()


«x:# ---------------------
# copied from blender's
# build_files/cmake/macros.cmake
»
«k:macro»(«f:ADD_CHECK_C_COMPILER_FLAG»
	«v:_CFLAGS»
	«v:_CACHE_VAR»
	«v:_FLAG»)

	«k:include»(CheckCCompilerFlag)

	«f:CHECK_C_COMPILER_FLAG»(«s:"${«v:_FLAG»}"» «s:"${«v:_CACHE_VAR»}"»)
	«k:if»(«D:${»«v:_CACHE_VAR»«D:}»)
		«x:# message(STATUS "Using CFLAG: ${_FLAG}")
»		«f:set»(«D:${»«v:_CFLAGS»«D:}» «s:"${${«v:_CFLAGS»}} ${«v:_FLAG»}"»)
	«k:else»()
		«f:message»(«t:STATUS» «s:"Unsupported CFLAG: ${«v:_FLAG»}"»)
	«k:endif»()
«k:endmacro»()

«k:macro»(«f:ADD_CHECK_CXX_COMPILER_FLAG»
	«v:_CXXFLAGS»
	«v:_CACHE_VAR»
	«v:_FLAG»)

	«k:include»(CheckCXXCompilerFlag)

	«f:CHECK_CXX_COMPILER_FLAG»(«s:"${«v:_FLAG»}"» «s:"${«v:_CACHE_VAR»}"»)
	«k:if»(«D:${»«v:_CACHE_VAR»«D:}»)
		«x:# message(STATUS "Using CXXFLAG: ${_FLAG}")
»		«f:set»(«D:${»«v:_CXXFLAGS»«D:}» «s:"${${«v:_CXXFLAGS»}} ${«v:_FLAG»}"»)
	«k:else»()
		«f:message»(«t:STATUS» «s:"Unsupported CXXFLAG: ${«v:_FLAG»}"»)
	«k:endif»()
«k:endmacro»()
«x:# end copy
# --------
»
«x:#-----------------------------------------------------------------------------
# Initialize project.
»
«f:project»(OPENCOLLADA)  «x:# must be after setting cmake_configuration_types
»
«x:# defines where specific parts of BRICS_MM are stored or created
»«f:set»(«v:LIBRARY_OUTPUT_PATH»            «D:${»«v:CMAKE_HOME_DIRECTORY»«D:}»/lib)  «x:# static libraries
»«f:set»(«v:EXECUTABLE_OUTPUT_PATH»         «D:${»«v:CMAKE_HOME_DIRECTORY»«D:}»/bin)  «x:# executables
»«f:set»(«v:EXTERNAL_LIBRARIES»        	   «D:${»«v:CMAKE_HOME_DIRECTORY»«D:}»/Externals)  «x:# external libraries
»«f:set»(«v:CMAKE_MODULE_PATH» «s:"${«v:EXTERNAL_LIBRARIES»}/cmake-modules"»)


«x:#-----------------------------------------------------------------------------
# Compiler warnings.
»
«f:set»(«v:C_WARNINGS»   «s:""»)
«f:set»(«v:CXX_WARNINGS» «s:""»)

«k:if» («v:CMAKE_COMPILER_IS_GNUCC»)
	«f:ADD_CHECK_C_COMPILER_FLAG»(C_WARNINGS C_WARN_ALL -Wall)
	«f:ADD_CHECK_C_COMPILER_FLAG»(C_WARNINGS C_WARN_EXTRA -Wextra)
	«f:ADD_CHECK_C_COMPILER_FLAG»(C_WARNINGS C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas)
	«f:ADD_CHECK_C_COMPILER_FLAG»(C_WARNINGS C_WARN_NO_SWITCH -Wno-switch)
	«f:ADD_CHECK_C_COMPILER_FLAG»(C_WARNINGS C_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter)
	«f:ADD_CHECK_C_COMPILER_FLAG»(C_WARNINGS C_WARN_NO_IGNORED_QUALIFIERS -Wno-ignored-qualifiers)
«k:endif» ()
«k:if» («v:CMAKE_COMPILER_IS_GNUCXX»)
	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_ALL -Wall)
	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_EXTRA -Wextra)
	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas)
	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_NO_SWITCH -Wno-switch)
	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_NO_REORDER -Wno-reorder)  «x:# could be re-ordered but for now this is just noise.
»	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter)
	«f:ADD_CHECK_CXX_COMPILER_FLAG»(CXX_WARNINGS CXX_WARN_NO_IGNORED_QUALIFIERS -Wno-ignored-qualifiers)
«k:endif» ()

«f:set»(«v:CMAKE_C_FLAGS» «s:"${«v:CMAKE_C_FLAGS»} ${«v:C_WARNINGS»}"»)
«f:set»(«v:CMAKE_CXX_FLAGS» «s:"${«v:CMAKE_CXX_FLAGS»} ${«v:CXX_WARNINGS»}"»)


«x:#-----------------------------------------------------------------------------
# Install vars
»
«f:set»(«v:OPENCOLLADA_INST_INCLUDE» «D:${»«v:CMAKE_INSTALL_PREFIX»«D:}»/include/opencollada)
«f:set»(«v:OPENCOLLADA_INST_LIBRARY» «D:${»«v:CMAKE_INSTALL_PREFIX»«D:}»/lib/opencollada)


«x:#-----------------------------------------------------------------------------
# Redirect output files
»
«f:set»(«v:EXECUTABLE_OUTPUT_PATH» «D:${»«v:CMAKE_BINARY_DIR»«D:}»/bin «t:CACHE» «t:INTERNAL» «s:""» «t:FORCE» )
«f:set»(«v:LIBRARY_OUTPUT_PATH» «D:${»«v:CMAKE_BINARY_DIR»«D:}»/lib «t:CACHE» «t:INTERNAL» «s:""» «t:FORCE» )


«x:#-----------------------------------------------------------------------------
# Set default config options
»
«f:option»(«v:USE_STATIC» «s:"Build static libraries"»  «c:ON»)
«f:option»(«v:USE_SHARED» «s:"Build shared libraries"»  «c:OFF»)
«f:option»(«v:USE_LIBXML» «s:"Use LibXml2 parser"»      «c:ON»)
«f:option»(«v:USE_EXPAT»  «s:"Use expat parser"»        «c:OFF»)

«x:#adding xml2
»«k:if» («v:USE_LIBXML»)
	«f:add_definitions»(
		-D«c:GENERATEDSAXPARSER_XMLPARSER_LIBXML»
		-D«c:XMLPARSER_LIBXML»
	)
	«f:find_package»(LibXml2)
	«k:if» («v:LIBXML2_FOUND»)
		«f:message»(«t:STATUS» «s:"SUCCESSFUL: LibXml2 found"»)
	«k:else» ()  «x:# if xml2 not found building its local copy from ./Externals
»		«k:if» («v:WIN32»)
			«f:message»(«s:"WARNING: Native LibXml2 not found, taking LibXml from ./Externals"»)
			«f:add_subdirectory»(«D:${»«v:EXTERNAL_LIBRARIES»«D:}»/LibXML)
			«f:set»(«v:LIBXML2_INCLUDE_DIR»
				«D:${»«v:libxml_include_dirs»«D:}»
			)
			«f:set»(«v:LIBXML2_LIBRARIES» xml)
		«k:else» ()
			«f:message»(«s:"ERROR: LibXml2 not found, please install xml2 library (for Debian libxml2-dev)"»)
		«k:endif» ()
	«k:endif» ()
«k:endif» ()

«k:if» («v:USE_EXPAT»)
	«f:add_definitions»(-D«c:GENERATEDSAXPARSER_XMLPARSER_EXPAT»)
	«f:message»(«s:"FATAL: EXPAT support not implemented"»)
	«x:# TODO:: use externals
»«k:endif» ()

«x:#adding PCRE
»«f:find_package»(PCRE)
«k:if» («v:PCRE_FOUND»)
	«f:message»(«t:STATUS» «s:"SUCCESSFUL: PCRE found"»)
«k:else» ()  «x:# if pcre not found building its local copy from ./Externals
»	«k:if» («v:WIN32»)
		«f:message»(«s:"WARNING: Native PCRE not found, taking PCRE from ./Externals"»)
		«f:add_definitions»(-D«c:PCRE_STATIC»)
		«f:add_subdirectory»(«D:${»«v:EXTERNAL_LIBRARIES»«D:}»/pcre)
		«f:set»(«v:PCRE_INCLUDE_DIR» «D:${»«v:libpcre_include_dirs»«D:}»)
		«f:set»(«v:PCRE_LIBRARIES» pcre)
	«k:else» ()
		«f:message»(«s:"ERROR: PCRE not found, please install pcre library"»)
	«k:endif» ()
«k:endif» ()

«x:# building required libs
»«f:add_subdirectory»(common/libftoa)
«f:add_subdirectory»(common/libBuffer)
«f:add_subdirectory»(«D:${»«v:EXTERNAL_LIBRARIES»«D:}»/UTF)
«f:add_subdirectory»(«D:${»«v:EXTERNAL_LIBRARIES»«D:}»/MathMLSolver)

«x:# building OpenCOLLADA libs
»«f:add_subdirectory»(COLLADABaseUtils)
«f:add_subdirectory»(COLLADAFramework)
«f:add_subdirectory»(GeneratedSaxParser)
«f:add_subdirectory»(COLLADASaxFrameworkLoader)
«f:add_subdirectory»(COLLADAStreamWriter)

«x:# building COLLADAValidator app
»«f:add_subdirectory»(COLLADAValidator)
