
«f:project»(Grantlee)

«f:cmake_minimum_required»(«t:VERSION» 2.6.4)

«x:# Workaround for http://public.kitware.com/Bug/view.php?id=12301
»«k:if» («v:MINGW»)
  «k:if»(«t:NOT» «v:CMAKE_BUILD_TYPE»)
    «f:set»(«v:CMAKE_BUILD_TYPE» Debug «t:CACHE» «t:STRING» «s:"Choose the type of build,
  options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release
  RelWithDebInfo MinSizeRel Coverage."» «t:FORCE»)
  «k:endif»()
«k:endif»()

«f:option»( «v:BUILD_CORE» «s:"Build the Grantlee template library. Deprecated. Use BUILD_TEMPLATES instead"» «c:TRUE» )
«f:option»( «v:BUILD_GUI» «s:"Build the Grantlee textdocument library. Deprecated. Use BUILD_TEXTDOCUMENT instead"» «c:TRUE» )
«f:option»( «v:BUILD_TEMPLATES» «s:"Build the Grantlee template library"» «c:TRUE» )
«f:option»( «v:BUILD_TEXTDOCUMENT» «s:"Build the Grantlee textdocument library"» «c:TRUE» )
«f:option»( «v:BUILD_MAIN_PLUGINS» «s:"Build the Grantlee Templates plugins"» «c:TRUE» )
«f:option»( «v:BUILD_I18N_PLUGIN» «s:"Build the Grantlee Templates i18n plugin"» «c:TRUE» )
«f:option»( «v:BUILD_SCRIPT_PLUGIN» «s:"Build the Grantlee Templates scriptable tags plugin"» «c:TRUE» )
«f:option»( «v:BUILD_TESTS» «s:"Build the Grantlee tests"» «c:TRUE» )

«k:if» («v:BUILD_TESTS»)
  «f:enable_testing»()
«k:endif»()

«f:set»(«v:Grantlee_MODULE_DIR» «D:${»«v:Grantlee_SOURCE_DIR»«D:}»/cmake/modules)
«f:set»(«v:CMAKE_MODULE_PATH» «D:${»«v:Grantlee_MODULE_DIR»«D:}»)

«k:include»(GrantleeGenerateExportHeader)

«x:# create coverage build type
»«f:set»(«v:CMAKE_CONFIGURATION_TYPES» «D:${»«v:CMAKE_CONFIGURATION_TYPES»«D:}» Coverage )
«k:if» («D:${»«v:CMAKE_VERSION»«D:}» «t:VERSION_GREATER» 2.8.2)
  «f:set_property»(«t:CACHE» CMAKE_BUILD_TYPE «t:PROPERTY» «c:STRINGS»
                «s:"Debug"» «s:"Release"» «s:"MinSizeRel"» «s:"RelWithDebInfo"» «s:"Coverage"» «s:"TestCocoon"»)
«k:endif»()

«f:set»(«v:CMAKE_CXX_FLAGS_COVERAGE» «s:"${«v:CMAKE_CXX_FLAGS_RELEASE»} -fprofile-arcs -ftest-coverage"»)
«f:set»(«v:CMAKE_C_FLAGS_COVERAGE» «s:"${«v:CMAKE_C_FLAGS_RELEASE»} -fprofile-arcs -ftest-coverage"»)
«f:set»(«v:CMAKE_EXE_LINKER_FLAGS_COVERAGE» «s:"${«v:CMAKE_EXE_LINKER_FLAGS_RELEASE»} -fprofile-arcs -ftest-coverage"»)
«f:set»(«v:CMAKE_SHARED_LINKER_FLAGS_COVERAGE» «s:"${«v:CMAKE_SHARED_LINKER_FLAGS_RELEASE»} -fprofile-arcs -ftest-coverage"»)
«f:set»(«v:CMAKE_STATIC_LINKER_FLAGS_COVERAGE» «s:"${«v:CMAKE_STATIC_LINKER_FLAGS_RELEASE»} -fprofile-arcs -ftest-coverage"»)

«f:set»(«v:TESTCOCOON_ARGS» «s:"--cs-on --cs-count --cs-include-file-abs-regex=${«v:CMAKE_SOURCE_DIR»}/.* --cs-include-file-regex=qrc_* --cs-qt4 --cs-exclude-file-abs-regex=${«v:CMAKE_BINARY_DIR»}/.*"»)
«f:set»(«v:CMAKE_CXX_FLAGS_TESTCOCOON» «s:"${«v:CMAKE_CXX_FLAGS_RELEASE»} ${«v:TESTCOCOON_ARGS»}"»)
«f:set»(«v:CMAKE_C_FLAGS_TESTCOCOON» «s:"${«v:CMAKE_C_FLAGS_RELEASE»} ${«v:TESTCOCOON_ARGS»}"»)
«f:set»(«v:CMAKE_EXE_LINKER_FLAGS_TESTCOCOON» «s:"${«v:CMAKE_EXE_LINKER_FLAGS_RELEASE»} ${«v:TESTCOCOON_ARGS»}"»)
«f:set»(«v:CMAKE_SHARED_LINKER_FLAGS_TESTCOCOON» «s:"${«v:CMAKE_SHARED_LINKER_FLAGS_RELEASE»} ${«v:TESTCOCOON_ARGS»}"»)
«f:set»(«v:CMAKE_STATIC_LINKER_FLAGS_TESTCOCOON» «s:"${«v:CMAKE_STATIC_LINKER_FLAGS_RELEASE»} ${«v:TESTCOCOON_ARGS»}"»)

«k:if» («v:CMAKE_COMPILER_IS_GNUCXX»)
  «f:set» («v:CMAKE_C_FLAGS»   «s:"${«v:CMAKE_C_FLAGS»} -Wno-long-long -std=iso9899:1990 -Wundef -Wcast-align -Werror-implicit-function-declaration -Wchar-subscripts -Wall -W -Wpointer-arith -Wwrite-strings -Wformat-security -Wmissing-format-attribute -fno-common"»)
  «f:set» («v:CMAKE_CXX_FLAGS» «s:"${«v:CMAKE_CXX_FLAGS»} -Wnon-virtual-dtor -Wno-long-long -ansi -Wundef -Wcast-align -Wchar-subscripts -Wall -W -Wpointer-arith -Wformat-security -fno-check-new -fno-common "»)

  «k:if» («v:CMAKE_BUILD_TYPE» «t:MATCHES» TestCocoon)
    «x:# Needed on 64 bit
»    «f:set» («v:CMAKE_CXX_FLAGS» «s:"${«v:CMAKE_CXX_FLAGS»} --cs-libgen=-fPIC"»)
  «k:else»()
    «f:set» («v:CMAKE_CXX_FLAGS» «s:"${«v:CMAKE_CXX_FLAGS»} -pedantic-errors"»)
  «k:endif»()

  «k:if» («t:NOT» «v:APPLE»)
    «f:set» ( «v:CMAKE_SHARED_LINKER_FLAGS» «s:"-Wl,--fatal-warnings -Wl,--no-undefined ${«v:CMAKE_SHARED_LINKER_FLAGS»}"»)
    «f:set» ( «v:CMAKE_MODULE_LINKER_FLAGS» «s:"-Wl,--fatal-warnings -Wl,--no-undefined ${«v:CMAKE_MODULE_LINKER_FLAGS»}"»)
  «k:endif» ()

  «k:if» («t:NOT» «v:MINGW»)
    «f:grantlee_enable_gcc_hidden_visibility»()
  «k:endif» ()
«k:endif»()

«x:# Tell FindQt4.cmake to point the QT_QTFOO_LIBRARY targets at the imported targets
# for the Qt libraries, so we get full handling of release and debug versions of the
# Qt libs and are flexible regarding the install location of Qt under Windows
»«f:set»(«v:QT_USE_IMPORTED_TARGETS» «c:TRUE»)

«f:add_definitions»(-D«c:QT_NO_CAST_TO_ASCII»)
«f:add_definitions»(-D«c:QT_NO_CAST_FROM_ASCII»)
«f:add_definitions»(-D«c:QT_STRICT_ITERATORS»)
«f:add_definitions»(-D«c:QT_NO_URL_CAST_FROM_STRING»)
«f:add_definitions»(-D«c:QT_NO_CAST_FROM_BYTEARRAY»)
«f:add_definitions»(-D«c:QT_NO_KEYWORDS»)

«x:# Always include the source and build directories in the include path
# to save doing so manually in every subdirectory.
»«f:SET»( «v:CMAKE_INCLUDE_CURRENT_DIR» «c:ON» )

«f:set»(«v:Grantlee_VERSION_MAJOR» 0)
«f:set»(«v:Grantlee_VERSION_MINOR» 3)
«f:set»(«v:Grantlee_VERSION_PATCH» 0)
«f:set»(«v:Grantlee_MIN_PLUGIN_VERSION» 1)

«f:set»(«v:Grantlee_MAJOR_MINOR_VERSION_STRING» «s:"${«v:Grantlee_VERSION_MAJOR»}.${«v:Grantlee_VERSION_MINOR»}"» )
«f:set»(«v:Grantlee_VERSION_STRING» «s:"${«v:Grantlee_VERSION_MAJOR»}.${«v:Grantlee_VERSION_MINOR»}.${«v:Grantlee_VERSION_PATCH»}"» )

«f:set» («v:LIB_SUFFIX» «s:""» «t:CACHE» «t:STRING» «s:"Define suffix of library directory name (eg. '64')"»)

«f:set»( «v:LIB_INSTALL_DIR» lib«D:${»«v:LIB_SUFFIX»«D:}» )
«f:set»( «v:PLUGIN_INSTALL_DIR» lib«D:${»«v:LIB_SUFFIX»«D:}»/grantlee/«D:${»«v:Grantlee_MAJOR_MINOR_VERSION_STRING»«D:}» )
«f:set»( «v:BIN_INSTALL_DIR» bin )
«f:set»( «v:INCLUDE_INSTALL_DIR» include )
«f:set»( «v:DATA_INSTALL_DIR» share/apps )

«x:# set up RPATH/install_name_dir
»«f:set»( «v:CMAKE_INSTALL_NAME_DIR» «D:${»«v:CMAKE_INSTALL_PREFIX»«D:}»/«D:${»«v:LIB_INSTALL_DIR»«D:}»)
«f:set»( «v:CMAKE_INSTALL_RPATH_USE_LINK_PATH» «c:TRUE»)

«f:set»(«v:Grantlee_USE_FILE» «s:"${«v:Grantlee_MODULE_DIR»}/GrantleeUse.cmake"»)

«k:if» («v:BUILD_CORE» «t:AND» «v:BUILD_TEMPLATES»)
  «f:add_subdirectory»(templates)
«k:endif»()

«k:if» («v:BUILD_GUI» «t:AND» «v:BUILD_TEXTDOCUMENT»)
  «f:add_subdirectory»(textdocument)
«k:endif»()

«f:set»(«v:CMAKECONFIG_INSTALL_DIR» «s:"${«v:LIB_INSTALL_DIR»}/cmake/grantlee"» )

«f:file»(«t:RELATIVE_PATH» «v:relInstallDir» «D:${»«v:CMAKE_INSTALL_PREFIX»«D:}»/«D:${»«v:CMAKECONFIG_INSTALL_DIR»«D:}» «D:${»«v:CMAKE_INSTALL_PREFIX»«D:}» )

«f:configure_file»(
  «s:"${«v:Grantlee_MODULE_DIR»}/GrantleeConfig.cmake.in"»
  «s:"${«v:Grantlee_BINARY_DIR»}/GrantleeConfig.cmake"»
  «t:@ONLY»
)

«f:configure_file»(
  «s:"${«v:Grantlee_MODULE_DIR»}/GrantleeConfigVersion.cmake.in"»
  «s:"${«v:Grantlee_BINARY_DIR»}/GrantleeConfigVersion.cmake"»
  «t:@ONLY»
)

«f:install»(«t:FILES»
  «s:"${«v:Grantlee_BINARY_DIR»}/GrantleeConfig.cmake"»
  «s:"${«v:Grantlee_BINARY_DIR»}/GrantleeConfigVersion.cmake"»
  «t:DESTINATION» «s:"${«v:CMAKECONFIG_INSTALL_DIR»}"»
  «t:COMPONENT» Common
)

«f:install»(«t:FILES»
  «s:"${«v:Grantlee_MODULE_DIR»}/GrantleeUse.cmake"»
  «s:"${«v:Grantlee_MODULE_DIR»}/GrantleeParseArguments.cmake"»
  «t:DESTINATION» «s:"${«v:CMAKECONFIG_INSTALL_DIR»}"»
  «t:COMPONENT» Common
)

«f:install»(«t:EXPORT» grantlee_targets
  «t:DESTINATION» «s:"${«v:CMAKECONFIG_INSTALL_DIR»}"»
  «t:FILE» GrantleeTargets.cmake
  «t:COMPONENT» Common
)

«x:# Add support for an uninstall target
»«f:configure_file»(
  «s:"${«v:Grantlee_MODULE_DIR»}/cmake_uninstall.cmake.in"»
  «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/cmake_uninstall.cmake"»
  IMMEDIATE «t:@ONLY»)

«f:add_custom_target»(«c:uninstall»
  «s:"${«v:CMAKE_COMMAND»}"» -P
  «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/cmake_uninstall.cmake"»)

«f:find_package»(Doxygen)
«k:if» («v:DOXYGEN_FOUND» «t:AND» «v:DOXYGEN_DOT_FOUND»)
  «f:message» («t:STATUS» «s:"Doxygen and dot found. make docs target is available"»)
  «x:# Add support for a docs target
»
  «x:# Available from http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/libstdc++.tag
»  «f:set»(«v:STLTAGFILE» «s:"${«v:CMAKE_SOURCE_DIR»}/scripts/libstdc++.tag=http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen"»)
  «f:set»(«v:QTTAGFILE» «s:"${«v:CMAKE_SOURCE_DIR»}/scripts/qttags.tag=http://qt.nokia.com/doc/${«v:QT_VERSION_MAJOR»}.${«v:QT_VERSION_MINOR»}"»)

  «f:set»(«v:TAGFILES» «s:"${«v:QTTAGFILE»} ${«v:STLTAGFILE»}"»)
  «f:set»(«v:DOCS_OUTPUT_DIRECTORY» «s:"@CMAKE_BINARY_DIR@"»)
  «f:configure_file»(
    «s:"${«v:Grantlee_MODULE_DIR»}/Doxyfile.in"»
    «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/Doxyfile"»
    «t:@ONLY»)

  «x:# Add support for a Qt assistant docs target
»  «x:# qttags.tag is too big to distribute with Grantlee. Get it
»  «x:# from http://api.kde.org/kdereview-api/kdereview.tar.gz for example.
»  «k:if»(«t:EXISTS» «D:${»«v:CMAKE_SOURCE_DIR»«D:}»/scripts/qttags.tag)
    «f:set»(«v:DOCS_OUTPUT_DIRECTORY» «s:"@CMAKE_BINARY_DIR@/qtdocs"»)

    «x:# Available from http://steveire.com/libstdc++-longnames.tag
»    «x:# Also recommended: http://www.steveire.com/libstdc++-v3.qch
»    «f:set»(«v:STLTAGFILE» «s:"${«v:CMAKE_SOURCE_DIR»}/scripts/libstdc++-longnames.tag=qthelp://org.gnu.libstdcxx/libstdc++-v3/"»)
    «f:set»(«v:QTTAGFILE» «s:"${«v:CMAKE_SOURCE_DIR»}/scripts/qttags.tag=qthelp://com.trolltech.qt/qdoc/"»)

    «f:set»(«v:TAGFILES» «s:"${«v:QTTAGFILE»} ${«v:STLTAGFILE»}"»)
    «f:set»(«v:GENERATE_QHP» «s:"yes"»)

    «f:configure_file»(
      «s:"${«v:Grantlee_MODULE_DIR»}/Doxyfile.in"»
      «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/Doxyfile.qt"»
      «t:@ONLY»)
  «k:endif»()

  «f:set»( «v:DOCS_ARGS» «D:${»«v:DOXYGEN_EXECUTABLE»«D:}» «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/Doxyfile"» )
  «k:if»(«t:EXISTS» «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/Doxyfile.qt"»)
    «f:set»(«v:DOCS_ARGS» «D:${»«v:DOCS_ARGS»«D:}» COMMAND «D:${»«v:DOXYGEN_EXECUTABLE»«D:}» «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/Doxyfile.qt"» )
  «k:endif»()

  «f:add_custom_target»(«c:docs»
    «D:${»«v:DOCS_ARGS»«D:}»
  )
«k:endif»()

«f:find_package»(LCov)

«k:if»(«v:LCOV_FOUND»)
  «f:get_property»(«v:UNITTESTS» «t:GLOBAL» «t:PROPERTY» «c:TEST_COVERAGE»)

  «f:set»(«v:coverageDir» «D:${»«v:CMAKE_BINARY_DIR»«D:}»)

  «k:foreach»(«v:_testpath» «D:${»«v:UNITTESTS»«D:}»)
    «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:LCOV_EXECUTABLE»«D:}» -z -d «D:${»«v:coverageDir»«D:}»)

    «f:get_filename_component»(«v:_test» «D:${»«v:_testpath»«D:}» «t:NAME»)

    «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:_testpath»«D:}»)
    «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:LCOV_EXECUTABLE»«D:}» -c -t «D:${»«v:_test»«D:}» -d «D:${»«v:coverageDir»«D:}» -o «D:${»«v:CMAKE_BINARY_DIR»«D:}»/test_«D:${»«v:_test»«D:}».info)
    «f:set»(«v:infoFiles» «D:${»«v:infoFiles»«D:}» -a «D:${»«v:CMAKE_BINARY_DIR»«D:}»/test_«D:${»«v:_test»«D:}».info)
  «k:endforeach»()

  «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:LCOV_EXECUTABLE»«D:}» «D:${»«v:infoFiles»«D:}» -o test_all.info)

  «x:# For an unknown reason lcov does not work with absolute paths such as ${CMAKE_BINARY_DIR}
»  «f:file»(«t:RELATIVE_PATH» «v:relBinaryDir» / «D:${»«v:CMAKE_BINARY_DIR»«D:}»)
  «f:file»(«t:RELATIVE_PATH» «v:relQtDir» / «D:${»«v:QT_HEADERS_DIR»«D:}»)

  «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:LCOV_EXECUTABLE»«D:}» -r test_all.info *«D:${»«v:relBinaryDir»«D:}»*
                                                                -r test_all.info *pluginpointer*
                                                                -r test_all.info *usr/include*
                                                                -r test_all.info *«D:${»«v:relQtDir»«D:}»*
                                                                -o test_all.info
  )

  «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:CMAKE_COMMAND»«D:}» -E remove_directory coverage)
  «f:set»(«v:coverage_ARGS» «D:${»«v:coverage_ARGS»«D:}» COMMAND «D:${»«v:GENHTML_EXECUTABLE»«D:}» -o coverage/ -s --demangle-cpp -f test_all.info)

  «f:add_custom_target»(«c:coverage»
    «D:${»«v:coverage_ARGS»«D:}»
  )
«k:endif»()

«k:if» («v:CMAKE_BUILD_TYPE» «t:MATCHES» TestCocoon)

  «f:get_property»(«v:UNITTESTS» «t:GLOBAL» «t:PROPERTY» «c:TEST_COVERAGE»)

  «f:set»(«v:coverageDir» «D:${»«v:CMAKE_BINARY_DIR»«D:}»)

  «f:set»(«v:testcocoon_ARGS»)

  «k:foreach»(«v:_testpath» «D:${»«v:UNITTESTS»«D:}»)
    «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}» COMMAND «s:"${«v:_testpath»}"»)
  «k:endforeach»()

  «f:find_program»(«v:TESTCOCOON_CMMERGE_EXECUTABLE» cmmerge)
  «f:find_program»(«v:TESTCOCOON_CMCSEXEIMPORT_EXECUTABLE» cmcsexeimport)

  «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}» COMMAND «D:${»«v:TESTCOCOON_CMMERGE_EXECUTABLE»«D:}» -o unittests.csmes)
  «k:foreach»(«v:_testpath» «D:${»«v:UNITTESTS»«D:}»)
    «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}» «D:${»«v:_testpath»«D:}».csmes)
  «k:endforeach»()
  «f:set»(«v:_plugins» «s:"grantlee_defaultfilters"» «s:"grantlee_defaulttags"» «s:"grantlee_i18ntags"» «s:"grantlee_loadertags"»)
  «k:foreach»(«v:_plugin» «D:${»«v:_plugins»«D:}»)
    «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}» «s:"${«v:coverageDir»}/grantlee/0.2/${«v:_plugin»}.so.csmes"»)
  «k:endforeach»()
  «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}» «s:"${«v:coverageDir»}/templates/lib/libgrantlee_core.so.csmes"»)

  «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}»
    COMMAND «D:${»«v:TESTCOCOON_CMCSEXEIMPORT_EXECUTABLE»«D:}»
    -m unittests.csmes -t «s:"\"--unnamed--\""» -p
    merge -e «s:"${«v:coverageDir»}/coverage.csexe"»
  )

  «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}»
    COMMAND «D:${»«v:TESTCOCOON_CMMERGE_EXECUTABLE»«D:}» -o «s:"${«v:coverageDir»}/libgrantlee_core.so.csmes"»
    -i «s:"${«v:coverageDir»}/templates/lib/libgrantlee_core.so.csmes"» «s:"${«v:coverageDir»}/unittests.csmes"»
  )

  «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}»
    COMMAND «D:${»«v:TESTCOCOON_CMMERGE_EXECUTABLE»«D:}» -o «s:"${«v:coverageDir»}/libgrantlee_gui.so.csmes"»
    -i «s:"${«v:coverageDir»}/textdocument/lib/libgrantlee_gui.so.csmes"» «s:"${«v:coverageDir»}/unittests.csmes"»
  )

  «k:foreach»(«v:_plugin» «D:${»«v:_plugins»«D:}»)
    «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}»
      COMMAND «D:${»«v:TESTCOCOON_CMMERGE_EXECUTABLE»«D:}» -o «s:"${«v:coverageDir»}/${«v:_plugin»}.so.csmes"»
      -i «s:"${«v:coverageDir»}/grantlee/0.2/${«v:_plugin»}.so.csmes"» «s:"${«v:coverageDir»}/unittests.csmes"»
    )
  «k:endforeach»()

  «f:find_program»(«v:TESTCOCOON_CMREPORT_EXECUTABLE» cmreport)
  «f:set»(«v:_csmes_files» «D:${»«v:_plugins»«D:}» «s:"libgrantlee_gui"» «s:"libgrantlee_core"»)
  «k:foreach»(«v:_csmes_file» «D:${»«v:_csmes_files»«D:}»)
    «f:set»(«v:testcocoon_ARGS» «D:${»«v:testcocoon_ARGS»«D:}»
      COMMAND echo -n \"«D:${»«v:_csmes_file»«D:}»\" COMMAND «D:${»«v:TESTCOCOON_CMREPORT_EXECUTABLE»«D:}» -s '.*' -m «s:"${«v:_csmes_file»}.so.csmes"»
    )
  «k:endforeach»()

  «f:add_custom_target»(«c:testcocoon»
    «D:${»«v:testcocoon_ARGS»«D:}»
  )
«k:endif»()

«f:find_package»(Cccc)
«k:if» («v:CCCC_FOUND»)
  «f:get_property»(«v:CCCC_FILES» «t:GLOBAL» «t:PROPERTY» «c:SOURCE_LIST»)

  «f:set»( «v:cccc_ARGS» «D:${»«v:CCCC_EXECUTABLE»«D:}» «D:${»«v:CCCC_FILES»«D:}» --outdir=«D:${»«v:CMAKE_BINARY_DIR»«D:}»/cccc --html_outfile=«D:${»«v:CMAKE_BINARY_DIR»«D:}»/cccc/index.html)

  «f:add_custom_target»(«c:cccc»
    «D:${»«v:cccc_ARGS»«D:}»
  )
«k:endif»()

«x:# http://www.vtk.org/Wiki/CMake:Component_Install_With_CPack
»«f:set»(«v:CPACK_PACKAGE_NAME» «s:"grantlee"»)
«f:set»(«v:CPACK_PACKAGE_VERSION_MAJOR» «D:${»«v:Grantlee_VERSION_MAJOR»«D:}»)
«f:set»(«v:CPACK_PACKAGE_VERSION_MINOR» «D:${»«v:Grantlee_VERSION_MINOR»«D:}»)
«f:set»(«v:CPACK_PACKAGE_VERSION_PATCH» «D:${»«v:Grantlee_VERSION_PATCH»«D:}»)
«f:set»(«v:CPACK_PACKAGE_CONTACT» «s:"Stephen Kelly <steveire@gmail.com>"»)
«f:set»(«v:CPACK_PACKAGE_DESCRIPTION_SUMMARY» «s:"A set of frameworks for use with Qt"»)
«f:set»(«v:CPACK_GENERATOR» «s:"TGZ"» )
«f:set»(«v:CPACK_RESOURCE_FILE_README» «s:"${«v:CMAKE_SOURCE_DIR»}/README"»)
«f:set»(«v:CPACK_RESOURCE_FILE_LICENSE» «s:"${«v:CMAKE_SOURCE_DIR»}/COPYING.LIB"»)

«f:set»(«v:CPACK_COMPONENT_COMMON_DISPLAY_NAME» «s:"Grantlee Common files"»)
«f:set»(«v:CPACK_COMPONENT_TEMPLATES_DISPLAY_NAME» «s:"Grantlee String Templates"»)
«f:set»(«v:CPACK_COMPONENT_TEXTDOCUMENT_DISPLAY_NAME» «s:"Grantlee TextDocument framework"»)

«f:set»(«v:CPACK_COMPONENT_COMMON_DESCRIPTION»
  «s:"Files needed by all Grantlee frameworks"»)
«f:set»(«v:CPACK_COMPONENT_TEMPLATES_DESCRIPTION»
  «s:"A string template system for Qt based on Django syntax"»)
«f:set»(«v:CPACK_COMPONENT_TEXTDOCUMENT_DESCRIPTION»
  «s:"A framework for QTextDocument related tasks"»)

«f:set»(«v:CPACK_COMPONENT_TEMPLATES_DEPENDS» Common)
«f:set»(«v:CPACK_COMPONENT_TEXTDOCUMENT_DEPENDS» Common)
«f:set»(«v:CPACK_COMPONENT_COMMON_REQUIRED» «c:ON»)

«f:set»(«v:CPACK_ARCHIVE_COMPONENT_INSTALL» «c:ON»)

«k:if» («v:WIN32»)
  «f:set»(«v:CPACK_NSIS_MODIFY_PATH» «c:ON»)
  «f:set»(«v:CPACK_GENERATOR» «D:${»«v:CPACK_GENERATOR»«D:}» «s:"NSIS"» )
«k:endif»()

«k:include»(CPack)
