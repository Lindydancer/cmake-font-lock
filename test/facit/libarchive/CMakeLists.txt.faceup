«x:#
#
»«f:PROJECT»(libarchive C)
«x:#
»«f:CMAKE_MINIMUM_REQUIRED»(«t:VERSION» 2.6.3 «t:FATAL_ERROR»)
«f:SET»(«v:CMAKE_MODULE_PATH» «s:"${«v:CMAKE_CURRENT_SOURCE_DIR»}/build/cmake"»)
«k:if»(«t:NOT» «v:CMAKE_RUNTIME_OUTPUT_DIRECTORY»)
  «f:set»(«v:CMAKE_RUNTIME_OUTPUT_DIRECTORY» «D:${»«v:libarchive_BINARY_DIR»«D:}»/bin)
«k:endif»()

«x:#
# Version - read from 'version' file.
#
»«f:FILE»(«t:STRINGS» «D:${»«v:CMAKE_CURRENT_SOURCE_DIR»«D:}»/build/version «v:_version»)
«f:STRING»(«t:REGEX» «t:REPLACE»
 «s:"^([0-9])[0-9][0-9][0-9][0-9][0-9][0-9][a-z]?$"» «s:"\\1"» «v:_major» «D:${»«v:_version»«D:}»)
«f:STRING»(«t:REGEX» «t:REPLACE»
 «s:"^[0-9]([0-9][0-9][0-9])[0-9][0-9][0-9][a-z]?$"» «s:"\\1"» «v:_minor» «D:${»«v:_version»«D:}»)
«f:STRING»(«t:REGEX» «t:REPLACE»
 «s:"^[0-9][0-9][0-9][0-9]([0-9][0-9][0-9])[a-z]?$"» «s:"\\1"» «v:_revision» «D:${»«v:_version»«D:}»)
«f:STRING»(«t:REGEX» «t:REPLACE»
 «s:"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9]([a-z]?)$"» «s:"\\1"» «v:_quality» «D:${»«v:_version»«D:}»)
«f:SET»(«v:_version_number» «D:${»«v:_major»«D:}${»«v:_minor»«D:}${»«v:_revision»«D:}»)
«f:STRING»(«t:REGEX» «t:REPLACE» «s:"[0]*([^0][0-9]*)$"» «s:"\\1"» «v:_minor» «D:${»«v:_minor»«D:}»)
«f:STRING»(«t:REGEX» «t:REPLACE» «s:"[0]*([^0][0-9]*)$"» «s:"\\1"» «v:_revision» «D:${»«v:_revision»«D:}»)
«x:#
»«f:SET»(«v:VERSION»                    «s:"${«v:_major»}.${«v:_minor»}.${«v:_revision»}${«v:_quality»}"»)
«f:SET»(«v:BSDCPIO_VERSION_STRING»     «s:"${«v:VERSION»}"»)
«f:SET»(«v:BSDTAR_VERSION_STRING»      «s:"${«v:VERSION»}"»)
«f:SET»(«v:LIBARCHIVE_VERSION_NUMBER»  «s:"${«v:_version_number»}"»)
«f:SET»(«v:LIBARCHIVE_VERSION_STRING»  «s:"${«v:VERSION»}"»)
«x:# Shared library number
»«f:SET»(«v:SOVERSION»                   8)

«x:# Enable CTest/CDash support
»«k:include»(CTest)

«x:# Provide ADD_TEST_28 macro to approximate CMake 2.8 ADD_TEST(NAME).
# TODO: Require CMake 2.8 and drop this workaround (perhaps late 2010).
»«k:INCLUDE»(AddTest28)

«f:OPTION»(«v:ENABLE_OPENSSL» «s:"Enable use of OpenSSL"» «c:ON»)
«f:OPTION»(«v:ENABLE_TAR» «s:"Enable tar building"» «c:ON»)
«f:OPTION»(«v:ENABLE_TAR_SHARED» «s:"Enable dynamic build of tar"» «c:OFF»)
«f:OPTION»(«v:ENABLE_CPIO» «s:"Enable cpio building"» «c:ON»)
«f:OPTION»(«v:ENABLE_CPIO_SHARED» «s:"Enable dynamic build of cpio"» «c:OFF»)
«f:OPTION»(«v:ENABLE_XATTR» «s:"Enable extended attribute support"» «c:ON»)
«f:OPTION»(«v:ENABLE_ACL» «s:"Enable ACL support"» «c:ON»)
«f:OPTION»(«v:ENABLE_TEST» «s:"Enable unit and regression tests"» «c:ON»)

«k:IF»(«v:ENABLE_TEST»)
	«f:ENABLE_TESTING»()
«k:ENDIF»(«v:ENABLE_TEST»)
«k:IF»(«v:WIN32» «t:AND» «t:NOT» «v:CYGWIN»)
  «x:# Currently, dynamic build only.
»  «f:SET»(«v:ENABLE_TAR_SHARED» «c:ON»)
  «f:SET»(«v:ENABLE_CPIO_SHARED» «c:ON»)
«k:ENDIF»(«v:WIN32» «t:AND» «t:NOT» «v:CYGWIN»)

«k:IF»(«v:WIN32»)
  «f:SET»(«v:_WIN32_WINNT» 0x0500 «t:CACHE» «t:INTERNAL» «s:"Setting _WIN32_WINNT to 0x0500 for Windows 2000 APIs"»)
  «f:SET»(«v:WINVER» 0x0500 «t:CACHE» «t:INTERNAL» «s:"Setting WINVER to 0x0500 for Windows 2000 APIs"»)
«k:ENDIF»(«v:WIN32»)

«x:#
»«k:INCLUDE»(CheckCSourceRuns)
«k:INCLUDE»(CheckFileOffsetBits)
«k:INCLUDE»(CheckFuncs)
«k:INCLUDE»(CheckHeaderDirent)
«k:INCLUDE»(CheckIncludeFile)
«k:INCLUDE»(CheckIncludeFiles)
«k:INCLUDE»(CheckLibraryExists)
«k:INCLUDE»(CheckStructMember)
«k:INCLUDE»(CheckSymbolExists)
«k:INCLUDE»(CheckTypeExists)
«k:INCLUDE»(CheckTypeSize)

«x:#
# Generate list.h
#
»«k:MACRO» («f:GENERATE_LIST_H» «v:_listfile» «v:_cmlist» «v:__list_sources»)
  «f:SET»(«v:_argv» «D:${»«v:ARGV»«D:}»)
  «x:# Remove _listfile and _cmlist from _argv
»  «f:LIST»(«t:REMOVE_AT» «v:_argv» 0 1)
  «k:IF» («t:NOT» «t:EXISTS» «s:"${«v:_listfile»}"» «t:OR»
     «D:${»«v:_cmlist»«D:}» «t:IS_NEWER_THAN» «s:"${«v:_listfile»}"»)

    «f:MESSAGE»(«t:STATUS» «s:"Generating ${«v:_listfile»}"»)
    «f:FILE»(«t:WRITE» «D:${»«v:_listfile»«D:}» «s:""»)
    «k:FOREACH» («v:testfile» «D:${»«v:_argv»«D:}»)
      «k:IF» («v:testfile» «t:MATCHES» «s:"^test_[^/]+[.]c$"»)
        «f:FILE»(«t:STRINGS» «D:${»«v:testfile»«D:}» «v:testvar» «t:REGEX» «s:"^DEFINE_TEST"»)
        «k:FOREACH» («v:deftest» «D:${»«v:testvar»«D:}»)
          «f:FILE»(«t:APPEND» «D:${»«v:_listfile»«D:}» «s:"${«v:deftest»}\n"»)
        «k:ENDFOREACH» («v:deftest»)
      «k:ENDIF» («v:testfile» «t:MATCHES» «s:"^test_[^/]+[.]c$"»)
    «k:ENDFOREACH» («v:testfile»)

  «k:ENDIF» («t:NOT» «t:EXISTS» «s:"${«v:_listfile»}"» «t:OR»
     «D:${»«v:_cmlist»«D:}» «t:IS_NEWER_THAN» «s:"${«v:_listfile»}"»)
«k:ENDMACRO» («f:GENERATE_LIST_H»)
«x:#
# Generate installation rules for man pages.
#
»«k:MACRO» («f:INSTALL_MAN» «v:__mans»)
  «k:FOREACH» («v:_man» «D:${»«v:ARGV»«D:}»)
    «f:STRING»(«t:REGEX» «t:REPLACE» «s:"^.+[.]([1-9])"» «s:"\\1"» «v:_mansect» «D:${»«v:_man»«D:}»)
    «f:INSTALL»(«t:FILES» «D:${»«v:_man»«D:}» «t:DESTINATION» «s:"share/man/man${«v:_mansect»}"»)
  «k:ENDFOREACH» («v:_man»)
«k:ENDMACRO» («f:INSTALL_MAN» «v:__mans»)

«x:#
# Check compress/decompress libraries
#
»«k:IF»(«v:WIN32» «t:AND» «t:NOT» «v:CMAKE_CL_64» «t:AND» «t:NOT» «v:CYGWIN»)
  «x:# GnuWin32 is only for Win32, not Win64.
»  «f:SET»(«v:__GNUWIN32PATH» «s:"C:/Program Files/GnuWin32"»)
«k:ENDIF»(«v:WIN32» «t:AND» «t:NOT» «v:CMAKE_CL_64» «t:AND» «t:NOT» «v:CYGWIN»)
«k:IF»(«t:DEFINED» «v:__GNUWIN32PATH» «t:AND» «t:EXISTS» «s:"${«v:__GNUWIN32PATH»}"»)
  «x:# You have to add a path availabel DLL file into PATH environment variable.
»  «x:# Maybe DLL path is "C:/Program Files/GnuWin32/bin".
»  «x:# The zlib and the bzip2 Setup program have installed programs and DLLs into
»  «x:# "C:/Program Files/GnuWin32" by default.
»  «x:# This is convenience setting for Windows.
»  «f:SET»(«v:CMAKE_PREFIX_PATH» «D:${»«v:__GNUWIN32PATH»«D:}» $(CMAKE_PREFIX_PATH))
  «x:#
»  «x:# If you didn't use Setup program or installed into nonstandard path,
»  «x:# cmake cannot find out your zlib or bzip2 libraries and include files,
»  «x:# you should execute cmake with  -DCMAKE_PREFIX_PATH option.
»  «x:#   e.g.
»  «x:#     cmake -DCMAKE_PREFIX_PATH=<your-GnuWin32-path> <path-to-source>
»  «x:#
»  «x:# If compiling error occured in zconf.h, You may need patch to zconf.h.
»  «x:#--- zconf.h.orig	2005-07-21 00:40:26.000000000
»  «x:#+++ zconf.h	2009-01-19 11:39:10.093750000
»  «x:#@@ -286,7 +286,7 @@
»  «x:# 
»  «x:# #if 1           /* HAVE_UNISTD_H -- this line is updated by ./configure */
»  «x:# #  include <sys/types.h> /* for off_t */
»  «x:#-#  include <unistd.h>    /* for SEEK_* and off_t */
»  «x:#+#  include <stdio.h>    /* for SEEK_* and off_t */
»  «x:# #  ifdef VMS
»  «x:# #    include <unixio.h>   /* for off_t */
»  «x:# #  endif
»«k:ENDIF»(«t:DEFINED» «v:__GNUWIN32PATH» «t:AND» «t:EXISTS» «s:"${«v:__GNUWIN32PATH»}"»)

«f:SET»(«v:ADDITIONAL_LIBS» «s:""»)
«x:#
# Find ZLIB
#
»«f:FIND_PACKAGE»(ZLIB)
«k:IF»(«v:ZLIB_FOUND»)
  «f:SET»(«v:HAVE_LIBZ» 1)
  «f:SET»(«v:HAVE_ZLIB_H» 1)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:ZLIB_INCLUDE_DIR»«D:}»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:ZLIB_LIBRARIES»«D:}»)
«k:ENDIF»(«v:ZLIB_FOUND»)
«f:MARK_AS_ADVANCED»(«t:CLEAR» «v:ZLIB_INCLUDE_DIR»)
«f:MARK_AS_ADVANCED»(«t:CLEAR» «v:ZLIB_LIBRARY»)
«x:#
# Find BZip2
#
»«f:FIND_PACKAGE»(BZip2)
«k:IF»(«v:BZIP2_FOUND»)
  «f:SET»(«v:HAVE_LIBBZ2» 1)
  «f:SET»(«v:HAVE_BZLIB_H» 1)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:BZIP2_INCLUDE_DIR»«D:}»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:BZIP2_LIBRARIES»«D:}»)
«k:ENDIF»(«v:BZIP2_FOUND»)
«f:MARK_AS_ADVANCED»(«t:CLEAR» «v:BZIP2_INCLUDE_DIR»)
«f:MARK_AS_ADVANCED»(«t:CLEAR» «v:BZIP2_LIBRARY»)
«x:#
# Find LZMA
#
»«f:FIND_PACKAGE»(LZMA)
«k:IF»(«v:LZMA_FOUND»)
  «f:SET»(«v:HAVE_LIBLZMA» 1)
  «f:SET»(«v:HAVE_LZMA_H» 1)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:LZMA_INCLUDE_DIR»«D:}»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:LZMA_LIBRARIES»«D:}»)
  «f:MARK_AS_ADVANCED»(«t:CLEAR» «v:LZMA_INCLUDE_DIR»)
  «f:MARK_AS_ADVANCED»(«t:CLEAR» «v:LZMA_LIBRARY»)
«k:ELSEIF»(«v:LZMADEC_FOUND»)
  «f:SET»(«v:HAVE_LIBLZMADEC» 1)
  «f:SET»(«v:HAVE_LZMADEC_H» 1)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:LZMADEC_INCLUDE_DIR»«D:}»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:LZMADEC_LIBRARIES»«D:}»)
  «f:MARK_AS_ADVANCED»(«t:CLEAR» «v:LZMADEC_INCLUDE_DIR»)
  «f:MARK_AS_ADVANCED»(«t:CLEAR» «v:LZMADEC_LIBRARY»)
«k:ELSE»(«v:LZMA_FOUND»)
  «f:MARK_AS_ADVANCED»(«t:CLEAR» «v:LZMA_INCLUDE_DIR»)
  «f:MARK_AS_ADVANCED»(«t:CLEAR» «v:LZMA_LIBRARY»)
«k:ENDIF»(«v:LZMA_FOUND»)

«x:#
# Check headers
#
»«f:CHECK_HEADER_DIRENT»()

«f:SET»(«v:INCLUDES» «s:""»)
«k:MACRO» («f:LA_CHECK_INCLUDE_FILE» «v:header» «v:var»)
      «f:CHECK_INCLUDE_FILES»(«s:"${«v:INCLUDES»};${«v:header»}"» «D:${»«v:var»«D:}»)
      «k:IF» («D:${»«v:var»«D:}»)
      	 «f:SET»(«v:INCLUDES» «D:${»«v:INCLUDES»«D:}» «D:${»«v:header»«D:}»)
      «k:ENDIF» («D:${»«v:var»«D:}»)
«k:ENDMACRO» («f:LA_CHECK_INCLUDE_FILE»)

«x:# Few headers that must precede other headers
# Must precede sys/extattr.h on FreeBSD
»«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/types.h"» HAVE_SYS_TYPES_H)

«x:# Alphabetize the rest unless there's a compelling reason
»«f:LA_CHECK_INCLUDE_FILE»(«s:"acl/libacl.h"» HAVE_ACL_LIBACL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"attr/xattr.h"» HAVE_ATTR_XATTR_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"ctype.h"» HAVE_CTYPE_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"direct.h"» HAVE_DIRECT_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"dlfcn.h"» HAVE_DLFCN_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"errno.h"» HAVE_ERRNO_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"ext2fs/ext2_fs.h"» HAVE_EXT2FS_EXT2_FS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"fcntl.h"» HAVE_FCNTL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"grp.h"» HAVE_GRP_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"inttypes.h"» HAVE_INTTYPES_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"io.h"» HAVE_IO_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"langinfo.h"» HAVE_LANGINFO_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"limits.h"» HAVE_LIMITS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"linux/fs.h"» HAVE_LINUX_FS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"locale.h"» HAVE_LOCALE_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"memory.h"» HAVE_MEMORY_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"paths.h"» HAVE_PATHS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"poll.h"» HAVE_POLL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"process.h"» HAVE_PROCESS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"pwd.h"» HAVE_PWD_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"regex.h"» HAVE_REGEX_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"signal.h"» HAVE_SIGNAL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"stdarg.h"» HAVE_STDARG_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"stdint.h"» HAVE_STDINT_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"stdlib.h"» HAVE_STDLIB_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"string.h"» HAVE_STRING_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"strings.h"» HAVE_STRINGS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/acl.h"» HAVE_SYS_ACL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/cdefs.h"» HAVE_SYS_CDEFS_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/extattr.h"» HAVE_SYS_EXTATTR_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/ioctl.h"» HAVE_SYS_IOCTL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/mkdev.h"» HAVE_SYS_MKDEV_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/param.h"» HAVE_SYS_PARAM_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/poll.h"» HAVE_SYS_POLL_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/select.h"» HAVE_SYS_SELECT_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/stat.h"» HAVE_SYS_STAT_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/time.h"» HAVE_SYS_TIME_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/utime.h"» HAVE_SYS_UTIME_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sys/wait.h"» HAVE_SYS_WAIT_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"time.h"» HAVE_TIME_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"unistd.h"» HAVE_UNISTD_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"utime.h"» HAVE_UTIME_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"wchar.h"» HAVE_WCHAR_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"wctype.h"» HAVE_WCTYPE_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"windows.h"» HAVE_WINDOWS_H)


«x:#
# Some headers require extra includes when they're available.
#
»
«x:#
# Find OpenSSL
#
»«k:IF»(«v:ENABLE_OPENSSL»)
  «f:FIND_PACKAGE»(OpenSSL)
«k:ELSE»()
  «f:SET»(«v:OPENSSL_FOUND» 0)
«k:ENDIF»()
«k:IF»(«v:OPENSSL_FOUND»)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:OPENSSL_INCLUDE_DIR»«D:}»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:OPENSSL_LIBRARIES»«D:}»)
«k:ELSE»()
  «x:# Block OpenSSL checks and override cached results.
»  «f:SET»(«v:HAVE_OPENSSL_MD5_H» 0)
  «f:SET»(«v:HAVE_OPENSSL_RIPEMD_H» 0)
  «f:SET»(«v:HAVE_OPENSSL_SHA_H» 0)
  «f:SET»(«v:HAVE_OPENSSL_SHA256_INIT» 0)
  «f:SET»(«v:HAVE_OPENSSL_SHA384_INIT» 0)
  «f:SET»(«v:HAVE_OPENSSL_SHA512_INIT» 0)
«k:ENDIF»()
«x:#
# Check MD5/RMD160/SHA headers
#
»«f:LA_CHECK_INCLUDE_FILE»(«s:"md5.h"» HAVE_MD5_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"openssl/md5.h"» HAVE_OPENSSL_MD5_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"openssl/ripemd.h"» HAVE_OPENSSL_RIPEMD_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"openssl/sha.h"» HAVE_OPENSSL_SHA_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"ripemd.h"» HAVE_RIPEMD_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"rmd160.h"» HAVE_RMD160_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sha.h"» HAVE_SHA_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sha1.h"» HAVE_SHA1_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sha2.h"» HAVE_SHA2_H)
«f:LA_CHECK_INCLUDE_FILE»(«s:"sha256.h"» HAVE_SHA256_H)

«x:#
# Find MD5/RMD160/SHA library
#
»«f:FIND_LIBRARY»(«v:CRYPTO_LIBRARY» «t:NAMES» crypto)
«k:IF»(«v:CRYPTO_LIBRARY»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:CRYPTO_LIBRARY»«D:}»)
«k:ELSE»(«v:CRYPTO_LIBRARY»)
  «k:IF»(«t:NOT» «v:OPENSSL_FOUND»)
    «f:FIND_LIBRARY»(«v:MD_LIBRARY» «t:NAMES» md)
    «k:IF»(«v:MD_LIBRARY»)
      «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:MD_LIBRARY»«D:}»)
    «k:ENDIF»(«v:MD_LIBRARY»)
  «k:ENDIF»(«t:NOT» «v:OPENSSL_FOUND»)
«k:ENDIF»(«v:CRYPTO_LIBRARY»)
«x:#
# Check MD5/RMD160/SHA functions
#
»«f:SET»(«v:CMAKE_REQUIRED_LIBRARIES» «D:${»«v:ADDITIONAL_LIBS»«D:}»)
«k:IF»(«v:HAVE_MD5_H»)
  «f:CHECK_SYMBOL_EXISTS»(MD5Init			«s:"md5.h"»		HAVE_MD5INIT)
«k:ENDIF»(«v:HAVE_MD5_H»)
«k:IF»(«v:HAVE_RMD160_H»)
  «f:CHECK_SYMBOL_EXISTS»(RMD160Init		«s:"rmd160.h"»	HAVE_RMD160INIT)
«k:ENDIF»(«v:HAVE_RMD160_H»)
«k:IF»(«v:HAVE_SHA2_H»)
  «f:CHECK_SYMBOL_EXISTS»(SHA256Init		«s:"sha2.h"»	HAVE_SHA256INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA384Init		«s:"sha2.h"»	HAVE_SHA384INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA512Init		«s:"sha2.h"»	HAVE_SHA512INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA256_Init		«s:"sha2.h"»	HAVE_SHA256_INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA384_Init		«s:"sha2.h"»	HAVE_SHA384_INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA512_Init		«s:"sha2.h"»	HAVE_SHA512_INIT)
«k:ELSEIF»(«v:HAVE_OPENSSL_SHA_H»)
  «f:CHECK_SYMBOL_EXISTS»(SHA256_Init		«s:"openssl/sha.h"»	HAVE_OPENSSL_SHA256_INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA384_Init		«s:"openssl/sha.h"»	HAVE_OPENSSL_SHA384_INIT)
  «f:CHECK_SYMBOL_EXISTS»(SHA512_Init		«s:"openssl/sha.h"»	HAVE_OPENSSL_SHA512_INIT)
«k:ENDIF»()
«f:SET»(«v:CMAKE_REQUIRED_LIBRARIES» «s:""»)

«x:#
# Find Libxml2
#
»«f:FIND_PACKAGE»(LibXml2)
«k:IF»(«v:LIBXML2_FOUND»)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:LIBXML2_INCLUDE_DIR»«D:}»)
  «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:LIBXML2_LIBRARIES»«D:}»)
  «f:SET»(«v:HAVE_LIBXML2» 1)
  «x:# libxml2's include files use iconv.h
»  «x:# We need a directory path of iconv.h so that it won't fail to check
»  «x:# "libxml/xmlreader.h".
»  «f:FIND_PATH»(«v:ICONV_INCLUDE_DIR» iconv.h)
  «f:INCLUDE_DIRECTORIES»(«D:${»«v:ICONV_INCLUDE_DIR»«D:}»)
  «f:SET»(«v:CMAKE_REQUIRED_INCLUDES» «D:${»«v:ICONV_INCLUDE_DIR»«D:}» «D:${»«v:LIBXML2_INCLUDE_DIR»«D:}»)
  «f:CHECK_INCLUDE_FILES»(«s:"libxml/xmlreader.h"» HAVE_LIBXML_XMLREADER_H)
  «f:SET»(«v:CMAKE_REQUIRED_INCLUDES» «s:""»)
«k:ELSE»(«v:LIBXML2_FOUND»)
  «x:#
»  «x:# Find Expat
»  «x:#
»  «f:FIND_PACKAGE»(EXPAT)
  «k:IF»(«v:EXPAT_FOUND»)
    «f:INCLUDE_DIRECTORIES»(«D:${»«v:EXPAT_INCLUDE_DIR»«D:}»)
    «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:EXPAT_LIBRARIES»«D:}»)
    «f:SET»(«v:HAVE_LIBEXPAT» 1)
    «f:LA_CHECK_INCLUDE_FILE»(«s:"expat.h"» HAVE_EXPAT_H)
  «k:ENDIF»(«v:EXPAT_FOUND»)
«k:ENDIF»(«v:LIBXML2_FOUND»)

«x:#
# Check functions
#
»«f:CHECK_SYMBOL_EXISTS»(CreateHardLinkA «s:"windows.h"» HAVE_CREATEHARDLINKA)
«f:CHECK_SYMBOL_EXISTS»(CreateHardLinkW «s:"windows.h"» HAVE_CREATEHARDLINKW)
«f:CHECK_SYMBOL_EXISTS»(_CrtSetReportMode «s:"crtdbg.h"» HAVE__CrtSetReportMode)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(chflags HAVE_CHFLAGS)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(chown HAVE_CHOWN)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(chroot HAVE_CHROOT)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fchdir HAVE_FCHDIR)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fchflags HAVE_FCHFLAGS)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fchmod HAVE_FCHMOD)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fchown HAVE_FCHOWN)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fcntl HAVE_FCNTL)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fork HAVE_FORK)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(fstat HAVE_FSTAT)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(ftruncate HAVE_FTRUNCATE)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(futimens HAVE_FUTIMENS)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(futimes HAVE_FUTIMES)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(geteuid HAVE_GETEUID)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(getpid HAVE_GETPID)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(lchflags HAVE_LCHFLAGS)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(lchmod HAVE_LCHMOD)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(lchown HAVE_LCHOWN)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(link HAVE_LINK)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(lstat HAVE_LSTAT)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(lutimes HAVE_LUTIMES)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(memmove HAVE_MEMMOVE)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(mkdir HAVE_MKDIR)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(mkfifo HAVE_MKFIFO)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(mknod HAVE_MKNOD)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(nl_langinfo HAVE_NL_LANGINFO)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(pipe HAVE_PIPE)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(poll HAVE_POLL)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(readlink HAVE_READLINK)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(select HAVE_SELECT)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(setenv HAVE_SETENV)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(setlocale HAVE_SETLOCALE)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(sigaction HAVE_SIGACTION)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(strchr HAVE_STRCHR)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(strdup HAVE_STRDUP)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(strerror HAVE_STRERROR)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(strncpy_s HAVE_STRNCPY_S)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(strrchr HAVE_STRRCHR)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(symlink HAVE_SYMLINK)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(timegm HAVE_TIMEGM)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(tzset HAVE_TZSET)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(unsetenv HAVE_UNSETENV)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(utime HAVE_UTIME)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(utimes HAVE_UTIMES)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(utimensat HAVE_UTIMENSAT)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(vfork HAVE_VFORK)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(wcrtomb HAVE_WCRTOMB)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(wcscpy HAVE_WCSCPY)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(wcslen HAVE_WCSLEN)
«f:CHECK_FUNCTION_EXISTS_GLIBC»(wctomb HAVE_WCTOMB)
«f:CHECK_SYMBOL_EXISTS»(wmemcmp «s:"wchar.h"» HAVE_WMEMCMP)
«f:CHECK_SYMBOL_EXISTS»(wmemcpy «s:"wchar.h"» HAVE_WMEMCPY)

«f:SET»(«v:CMAKE_REQUIRED_LIBRARIES» «s:""»)
«f:CHECK_SYMBOL_EXISTS»(fseeko           «s:"stdio.h"»    HAVE_FSEEKO)
«f:CHECK_SYMBOL_EXISTS»(strerror_r       «s:"string.h"»   HAVE_STRERROR_R)
«f:CHECK_SYMBOL_EXISTS»(strftime         «s:"time.h"»     HAVE_STRFTIME)
«f:CHECK_SYMBOL_EXISTS»(vprintf          «s:"stdio.h"»    HAVE_VPRINTF)
«f:CHECK_SYMBOL_EXISTS»(cygwin_conv_path «s:"sys/cygwin.h"» HAVE_CYGWIN_CONV_PATH)

«f:CHECK_SYMBOL_EXISTS»(major            «s:"sys/mkdev.h"»     MAJOR_IN_MKDEV)
«f:CHECK_SYMBOL_EXISTS»(major            «s:"sys/sysmacros.h"» MAJOR_IN_SYSMACROS)

«k:IF»(«v:HAVE_STRERROR_R»)
  «f:SET»(«v:HAVE_DECL_STRERROR_R» 1)
«k:ENDIF»(«v:HAVE_STRERROR_R»)

«x:#
# Check defines
#
»«f:SET»(«v:headers» «s:"limits.h"»)
«k:IF»(«v:HAVE_STDINT_H»)
  «f:LIST»(«t:APPEND» «v:headers» «s:"stdint.h"»)
«k:ENDIF»(«v:HAVE_STDINT_H»)
«k:IF»(«v:HAVE_INTTYPES_H»)
  «f:LIST»(«t:APPEND» «v:headers» «s:"inttypes.h"»)
«k:ENDIF»(«v:HAVE_INTTYPES_H»)
«f:CHECK_SYMBOL_EXISTS»(EFTYPE           «s:"errno.h"»    HAVE_EFTYPE)
«f:CHECK_SYMBOL_EXISTS»(EILSEQ           «s:"errno.h"»    HAVE_EILSEQ)
«f:CHECK_SYMBOL_EXISTS»(D_MD_ORDER       «s:"langinfo.h"» HAVE_D_MD_ORDER)
«f:CHECK_SYMBOL_EXISTS»(optarg           «s:"unistd.h"»   HAVE_DECL_OPTARG)
«f:CHECK_SYMBOL_EXISTS»(optind           «s:"unistd.h"»   HAVE_DECL_OPTIND)
«f:CHECK_SYMBOL_EXISTS»(INT64_MAX        «s:"${«v:headers»}"» HAVE_DECL_INT64_MAX)
«f:CHECK_SYMBOL_EXISTS»(INT64_MIN        «s:"${«v:headers»}"» HAVE_DECL_INT64_MIN)
«f:CHECK_SYMBOL_EXISTS»(UINT32_MAX       «s:"${«v:headers»}"» HAVE_DECL_UINT32_MAX)
«f:CHECK_SYMBOL_EXISTS»(UINT64_MAX       «s:"${«v:headers»}"» HAVE_DECL_UINT64_MAX)
«f:CHECK_SYMBOL_EXISTS»(SIZE_MAX         «s:"${«v:headers»}"» HAVE_DECL_SIZE_MAX)
«f:CHECK_SYMBOL_EXISTS»(SSIZE_MAX        «s:"limits.h"»   HAVE_DECL_SSIZE_MAX)

«x:#
# Check struct members
#
# Check for birthtime in struct stat
»«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_birthtime
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_BIRTHTIME)

«x:# Check for high-resolution timestamps in struct stat
»«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_birthtimespec.tv_nsec
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC)
«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_mtimespec.tv_nsec
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC)
«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_mtim.tv_nsec
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC)
«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_mtime_n
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_MTIME_N)
«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_umtime
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_UMTIME)
«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_mtime_usec
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_MTIME_USEC)
«x:# Check for block size support in struct stat
»«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_blksize
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_BLKSIZE)
«x:# Check for st_flags in struct stat (BSD fflags)
»«f:CHECK_STRUCT_MEMBER»(«s:"struct stat"» st_flags
    «s:"sys/types.h;sys/stat.h"» HAVE_STRUCT_STAT_ST_FLAGS)
«x:#
#
»«f:CHECK_STRUCT_MEMBER»(«s:"struct tm"» tm_sec
    «s:"sys/types.h;sys/time.h;time.h"» TIME_WITH_SYS_TIME)

«x:#
# Check for integer types
#
# XXX There must be a way to make this simpler <sigh> XXXX
#
»«f:CHECK_TYPE_SIZE»(«s:"long long int"»            LONG_LONG_INT)
«f:CHECK_TYPE_SIZE»(«s:"unsigned long long"»       UNSIGNED_LONG_LONG)
«f:CHECK_TYPE_SIZE»(«s:"unsigned long long int"»   UNSIGNED_LONG_LONG_INT)

«x:#
»«f:CHECK_TYPE_SIZE»(dev_t       DEV_T)
«k:IF»(«t:NOT» «v:HAVE_DEV_T»)
  «k:IF»(«v:MSVC»)
    «f:SET»(«v:dev_t» «s:"unsigned int"»)
  «k:ENDIF»(«v:MSVC»)
«k:ENDIF»(«t:NOT» «v:HAVE_DEV_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(gid_t       GID_T)
«k:IF»(«t:NOT» «v:HAVE_GID_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:gid_t» «s:"short"»)
  «k:ELSE»(«v:WIN32»)
    «f:SET»(«v:gid_t» «s:"unsigned int"»)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_GID_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(id_t        ID_T)
«k:IF»(«t:NOT» «v:HAVE_ID_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:id_t» «s:"short"»)
  «k:ELSE»(«v:WIN32»)
    «f:SET»(«v:id_t» «s:"unsigned int"»)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_ID_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(int32_t    INT32_T)
«k:IF»(«t:NOT» «v:HAVE_INT32_T»)
  «f:SET»(«v:int32_t» «s:"int"»)
«k:ENDIF»(«t:NOT» «v:HAVE_INT32_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(int64_t     INT64_T)
«k:IF»(«t:NOT» «v:HAVE_INT64_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:int64_t» __int64)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_INT64_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(intmax_t    INTMAX_T)
«k:IF»(«t:NOT» «v:HAVE_INTMAX_T»)
  «f:SET»(«v:intmax_t» «s:"int64_t"»)
«k:ENDIF»(«t:NOT» «v:HAVE_INTMAX_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(mode_t      MODE_T)
«k:IF»(«t:NOT» «v:HAVE_MODE_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:mode_t» «s:"unsigned short"»)
  «k:ELSE»(«v:WIN32»)
    «f:SET»(«v:mode_t» «s:"int"»)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_MODE_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(off_t       OFF_T)
«k:IF»(«t:NOT» «v:HAVE_OFF_T»)
  «f:SET»(«v:off_t» «s:"__int64"»)
«k:ENDIF»(«t:NOT» «v:HAVE_OFF_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(size_t      SIZE_T)
«k:IF»(«t:NOT» «v:HAVE_SIZE_T»)
  «k:IF»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
    «f:SET»(«v:size_t» «s:"uint64_t"»)
  «k:ELSE»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
    «f:SET»(«v:size_t»   «s:"uint32_t"»)
  «k:ENDIF»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
«k:ENDIF»(«t:NOT» «v:HAVE_SIZE_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(ssize_t     SSIZE_T)
«k:IF»(«t:NOT» «v:HAVE_SSIZE_T»)
  «k:IF»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
    «f:SET»(«v:ssize_t» «s:"int64_t"»)
  «k:ELSE»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
    «f:SET»(«v:ssize_t» «s:"long"»)
  «k:ENDIF»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
«k:ENDIF»(«t:NOT» «v:HAVE_SSIZE_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(uid_t       UID_T)
«k:IF»(«t:NOT» «v:HAVE_UID_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:uid_t» «s:"short"»)
  «k:ELSE»(«v:WIN32»)
    «f:SET»(«v:uid_t» «s:"unsigned int"»)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_UID_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(pid_t       PID_T)
«k:IF»(«t:NOT» «v:HAVE_PID_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:pid_t» «s:"int"»)
  «k:ELSE»(«v:WIN32»)
    «f:MESSAGE»(«t:FATAL_ERROR» «s:"pid_t doesn't exist on this platform?"»)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_PID_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(uint16_t    UINT16_T)
«k:IF»(«t:NOT» «v:HAVE_UINT16_T»)
  «f:SET»(«v:uint16_t» «s:"unsigned short"»)
«k:ENDIF»(«t:NOT» «v:HAVE_UINT16_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(uint32_t    UINT32_T)
«k:IF»(«t:NOT» «v:HAVE_UINT32_T»)
  «f:SET»(«v:uint32_t» «s:"unsigned int"»)
«k:ENDIF»(«t:NOT» «v:HAVE_UINT32_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(uint64_t    UINT64_T)
«k:IF»(«t:NOT» «v:HAVE_UINT64_T»)
  «k:IF»(«v:WIN32»)
    «f:SET»(«v:uint64_t» «s:"unsigned __int64"»)
  «k:ENDIF»(«v:WIN32»)
«k:ENDIF»(«t:NOT» «v:HAVE_UINT64_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(uintmax_t   UINTMAX_T)
«k:IF»(«t:NOT» «v:HAVE_UINTMAX_T»)
  «f:SET»(«v:uintmax_t» «s:"uint64_t"»)
«k:ENDIF»(«t:NOT» «v:HAVE_UINTMAX_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(intptr_t   INTPTR_T)
«k:IF»(«t:NOT» «v:HAVE_INTPTR_T»)
  «k:IF»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
    «f:SET»(«v:intptr_t» «s:"int64_t"»)
  «k:ELSE»()
    «f:SET»(«v:intptr_t» «s:"int32_t"»)
  «k:ENDIF»()
«k:ENDIF»(«t:NOT» «v:HAVE_INTPTR_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(uintptr_t   UINTPTR_T)
«k:IF»(«t:NOT» «v:HAVE_UINTPTR_T»)
  «k:IF»(«s:"${«v:CMAKE_SIZEOF_VOID_P»}"» «t:EQUAL» 8)
    «f:SET»(«v:uintptr_t» «s:"uint64_t"»)
  «k:ELSE»()
    «f:SET»(«v:uintptr_t» «s:"uint32_t"»)
  «k:ENDIF»()
«k:ENDIF»(«t:NOT» «v:HAVE_UINTPTR_T»)
«x:#
»«f:CHECK_TYPE_SIZE»(wchar_t     SIZEOF_WCHAR_T)
«k:IF»(«v:HAVE_SIZEOF_WCHAR_T»)
  «f:SET»(«v:HAVE_WCHAR_T» 1)
«k:ENDIF»(«v:HAVE_SIZEOF_WCHAR_T»)
«x:#
# Check if _FILE_OFFSET_BITS macro needed for large files
#
»«f:CHECK_FILE_OFFSET_BITS»()



«x:#
# Check for Extended Attribute libraries, headers, and functions
#
»«k:IF»(«v:ENABLE_XATTR»)
  «f:LA_CHECK_INCLUDE_FILE»(attr/xattr.h     HAVE_ATTR_XATTR_H)
  «f:LA_CHECK_INCLUDE_FILE»(sys/xattr.h      HAVE_SYS_XATTR_H)
  «f:CHECK_LIBRARY_EXISTS»(attr «s:"setxattr"» «s:""» HAVE_ATTR_LIB)
  «k:IF»(«v:HAVE_ATTR_LIB»)
    «f:SET»(«v:CMAKE_REQUIRED_LIBRARIES» «s:"attr"»)
  «k:ENDIF»(«v:HAVE_ATTR_LIB»)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(extattr_get_file HAVE_EXTATTR_GET_FILE)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(extattr_list_file HAVE_EXTATTR_LIST_FILE)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(extattr_set_fd HAVE_EXTATTR_SET_FD)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(extattr_set_file HAVE_EXTATTR_SET_FILE)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(fsetxattr HAVE_FSETXATTR)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(getxattr HAVE_GETXATTR)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(lgetxattr HAVE_LGETXATTR)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(listxattr HAVE_LISTXATTR)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(llistxattr HAVE_LLISTXATTR)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(lsetxattr HAVE_LSETXATTR)
«k:ENDIF»(«v:ENABLE_XATTR»)

«x:#
# Check for ACL libraries, headers, and functions
#
# The ACL support in libarchive is written against the POSIX1e draft,
# which was never officially approved and varies quite a bit across
# platforms.  Worse, some systems have completely non-POSIX acl functions,
# which makes the following checks rather more complex than I would like.
#
»«k:IF»(«v:ENABLE_ACL»)
  «f:CHECK_LIBRARY_EXISTS»(acl «s:"acl_get_file"» «s:""» HAVE_ACL_LIB)
  «k:IF»(«v:HAVE_ACL_LIB»)
    «f:SET»(«v:CMAKE_REQUIRED_LIBRARIES» «s:"acl"»)
    «f:FIND_LIBRARY»(«v:ACL_LIBRARY» «t:NAMES» acl)
    «f:LIST»(«t:APPEND» «v:ADDITIONAL_LIBS» «D:${»«v:ACL_LIBRARY»«D:}»)
  «k:ENDIF»(«v:HAVE_ACL_LIB»)
  «x:#
»  «f:CHECK_FUNCTION_EXISTS_GLIBC»(acl_create_entry HAVE_ACL_CREATE_ENTRY)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(acl_init HAVE_ACL_INIT)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(acl_set_fd HAVE_ACL_SET_FD)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(acl_set_fd_np HAVE_ACL_SET_FD_NP)
  «f:CHECK_FUNCTION_EXISTS_GLIBC»(acl_set_file HAVE_ACL_SET_FILE)
  «f:CHECK_TYPE_EXISTS»(acl_permset_t «s:"${«v:INCLUDES»}"»    HAVE_ACL_PERMSET_T)

  «x:# The "acl_get_perm()" function was omitted from the POSIX draft.
»  «x:# (It's a pretty obvious oversight; otherwise, there's no way to
»  «x:# test for specific permissions in a permset.)  Linux uses the obvious
»  «x:# name, FreeBSD adds _np to mark it as "non-Posix extension."
»  «x:# Test for both as a double-check that we really have POSIX-style ACL support.
»  «f:CHECK_SYMBOL_EXISTS»(acl_get_perm «s:"${«v:INCLUDES»}"» HAVE_ACL_GET_PERM)
  «f:CHECK_SYMBOL_EXISTS»(acl_get_perm_np «s:"${«v:INCLUDES»}"» HAVE_ACL_GET_PERM_NP)
  «f:CHECK_SYMBOL_EXISTS»(acl_get_link «s:"${«v:INCLUDES»}"» HAVE_ACL_GET_LINK)
  «f:CHECK_SYMBOL_EXISTS»(acl_get_link_np «s:"${«v:INCLUDES»}"» HAVE_ACL_GET_LINK_NP)

  «x:# MacOS has an acl.h that isn't POSIX.  It can be detected by
»  «x:# checking for ACL_USER
»  «f:CHECK_SYMBOL_EXISTS»(ACL_USER «s:"${«v:INCLUDES»}"» HAVE_ACL_USER)
«k:ENDIF»(«v:ENABLE_ACL»)

«x:# Generate "config.h" from "build/cmake/config.h.in"
»«f:CONFIGURE_FILE»(«D:${»«v:CMAKE_CURRENT_SOURCE_DIR»«D:}»/build/cmake/config.h.in
	«D:${»«v:CMAKE_CURRENT_BINARY_DIR»«D:}»/config.h)
«f:INCLUDE_DIRECTORIES»(«t:BEFORE» «D:${»«v:CMAKE_CURRENT_BINARY_DIR»«D:}»)
«f:ADD_DEFINITIONS»(-D«c:HAVE_CONFIG_H»)

«x:#
# Register installation of PDF documents.
#
»«k:IF»(«v:WIN32» «t:AND» «t:NOT» «v:CYGWIN»)
  «x:#
»  «x:# On Windows platform, It's better that we install PDF documents
»  «x:# on one's computer.
»  «x:# These PDF documents are available in the release package.
»  «x:#
»  «k:IF»(«t:EXISTS» «D:${»«v:CMAKE_CURRENT_SOURCE_DIR»«D:}»/doc/pdf)
    «f:INSTALL»(«t:DIRECTORY» «D:${»«v:CMAKE_CURRENT_SOURCE_DIR»«D:}»/doc/pdf
            «t:DESTINATION» share/man
            «t:FILES_MATCHING» «t:PATTERN» «s:"*.pdf"»
    )
  «k:ENDIF»(«t:EXISTS» «D:${»«v:CMAKE_CURRENT_SOURCE_DIR»«D:}»/doc/pdf)
«k:ENDIF»(«v:WIN32» «t:AND» «t:NOT» «v:CYGWIN»)
«x:#
#
#
»«f:INCLUDE_DIRECTORIES»(«t:BEFORE» «D:${»«v:CMAKE_CURRENT_SOURCE_DIR»«D:}»/libarchive)
«x:#
»«k:IF»(«v:MSVC»)
  «f:ADD_DEFINITIONS»(-D«c:_CRT_SECURE_NO_DEPRECATE»)
«k:ENDIF»(«v:MSVC»)
«x:# Especially for early development, we want to be a little
# aggressive about diagnosing build problems; this can get
# relaxed somewhat in final shipping versions.
»«k:IF» («s:"CMAKE_C_COMPILER_ID"» «t:MATCHES» «s:"^GNU$"»)
  «f:ADD_DEFINITIONS»(-Wall -Werror)
«k:ENDIF» («s:"CMAKE_C_COMPILER_ID"» «t:MATCHES» «s:"^GNU$"»)

«k:IF»(«v:ENABLE_TEST»)
«f:ADD_CUSTOM_TARGET»(«c:run_all_tests»)
«k:ENDIF»(«v:ENABLE_TEST»)

«f:add_subdirectory»(libarchive)
«f:add_subdirectory»(tar)
«f:add_subdirectory»(cpio)
