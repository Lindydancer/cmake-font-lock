«x:#=============================================================================
# CMake - Cross Platform Makefile Generator
# Copyright 2000-2009 Kitware, Inc., Insight Software Consortium
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
»«f:CMAKE_MINIMUM_REQUIRED»(«t:VERSION» 2.4.5 «t:FATAL_ERROR»)
«f:PROJECT»(CMake)
«k:IF»(«t:COMMAND» «f:CMAKE_POLICY»)
  «f:CMAKE_POLICY»(«t:SET» «c:CMP0003» «t:NEW»)
«k:ENDIF»(«t:COMMAND» «f:CMAKE_POLICY»)

«f:MARK_AS_ADVANCED»(«v:CMAKE_BACKWARDS_COMPATIBILITY»)

«x:# Allow empty endif() and such with CMake 2.4.
»«f:SET»(«v:CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS» 1)

«f:SET»(«v:CMake_BIN_DIR» «D:${»«v:CMake_BINARY_DIR»«D:}»/bin)

«k:IF»(«t:NOT» «D:${»«v:CMAKE_MAJOR_VERSION»«D:}».«D:${»«v:CMAKE_MINOR_VERSION»«D:}» «t:GREATER» 2.4)
  «x:# Since the built CMake will install itself instead of the
»  «x:# generating CMake, tell it that the install rules were generated
»  «x:# by CMake 2.4.
»  «f:INSTALL»(«t:CODE» «s:"SET(CMAKE_INSTALL_SELF_2_4 1)"»)
«k:ENDIF»()

«k:IF»(«s:"${«v:CMake_SOURCE_DIR»}"» «t:STREQUAL» «s:"${«v:CMAKE_SOURCE_DIR»}"»)
  «x:# Disallow architecture-specific try_run.  It may not run on the host.
»  «k:MACRO»(«f:TRY_RUN»)
    «k:IF»(«v:CMAKE_TRY_COMPILE_OSX_ARCHITECTURES»)
      «f:MESSAGE»(«t:FATAL_ERROR» «s:"TRY_RUN not allowed with CMAKE_TRY_COMPILE_OSX_ARCHITECTURES=[${«v:CMAKE_TRY_COMPILE_OSX_ARCHITECTURES»}]"»)
    «k:ELSE»()
      «f:_TRY_RUN»(«D:${»«v:ARGV»«D:}»)
    «k:ENDIF»()
  «k:ENDMACRO»()
«k:ENDIF»()

«x:#-----------------------------------------------------------------------
# a macro to deal with system libraries, implemented as a macro
# simply to improve readability of the main script
#-----------------------------------------------------------------------
»«k:MACRO»(«f:CMAKE_HANDLE_SYSTEM_LIBRARIES»)
  «x:# Options have dependencies.
»  «k:INCLUDE»(CMakeDependentOption)

  «x:# Optionally use system xmlrpc.  We no longer build or use it by default.
»  «f:OPTION»(«v:CTEST_USE_XMLRPC» «s:"Enable xmlrpc submission method in CTest."» «c:OFF»)
  «f:MARK_AS_ADVANCED»(«v:CTEST_USE_XMLRPC»)

  «x:# Allow the user to enable/disable all system utility library options
»  «x:# by setting CMAKE_USE_SYSTEM_LIBRARIES on the command line.
»  «k:IF»(«t:DEFINED» «v:CMAKE_USE_SYSTEM_LIBRARIES»)
    «f:SET»(«v:CMAKE_USE_SYSTEM_LIBRARIES_USER» 1)
  «k:ENDIF»(«t:DEFINED» «v:CMAKE_USE_SYSTEM_LIBRARIES»)
  «k:IF»(«v:CMAKE_USE_SYSTEM_LIBRARIES»)
    «f:SET»(«v:CMAKE_USE_SYSTEM_LIBRARIES» «c:ON»)
  «k:ELSE»(«v:CMAKE_USE_SYSTEM_LIBRARIES»)
    «f:SET»(«v:CMAKE_USE_SYSTEM_LIBRARIES» «c:OFF»)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_LIBRARIES»)
  «k:IF»(«v:CMAKE_USE_SYSTEM_LIBRARIES_USER»)
    «f:SET»(«v:CMAKE_USE_SYSTEM_CURL» «s:"${«v:CMAKE_USE_SYSTEM_LIBRARIES»}"»
      «t:CACHE» «t:BOOL» «s:"Use system-installed curl"» «t:FORCE»)
    «f:SET»(«v:CMAKE_USE_SYSTEM_EXPAT» «s:"${«v:CMAKE_USE_SYSTEM_LIBRARIES»}"»
      «t:CACHE» «t:BOOL» «s:"Use system-installed expat"» «t:FORCE»)
    «f:SET»(«v:CMAKE_USE_SYSTEM_ZLIB» «s:"${«v:CMAKE_USE_SYSTEM_LIBRARIES»}"»
      «t:CACHE» «t:BOOL» «s:"Use system-installed zlib"» «t:FORCE»)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_LIBRARIES_USER»)

  «x:# Optionally use system utility libraries.
»  «f:CMAKE_DEPENDENT_OPTION»(CMAKE_USE_SYSTEM_CURL «s:"Use system-installed curl"»
    «D:${»«v:CMAKE_USE_SYSTEM_LIBRARIES»«D:}» «s:"NOT CTEST_USE_XMLRPC"» «c:ON»)
  «f:CMAKE_DEPENDENT_OPTION»(CMAKE_USE_SYSTEM_EXPAT «s:"Use system-installed expat"»
    «D:${»«v:CMAKE_USE_SYSTEM_LIBRARIES»«D:}» «s:"NOT CTEST_USE_XMLRPC"» «c:ON»)
  «f:CMAKE_DEPENDENT_OPTION»(CMAKE_USE_SYSTEM_ZLIB «s:"Use system-installed zlib"»
    «D:${»«v:CMAKE_USE_SYSTEM_LIBRARIES»«D:}» «s:"NOT CMAKE_USE_SYSTEM_CURL"» «c:ON»)

  «x:# Mention to the user what system libraries are being used.
»  «k:FOREACH»(«v:util» CURL EXPAT XMLRPC ZLIB)
    «k:IF»(«v:CMAKE_USE_SYSTEM_»«D:${»«v:util»«D:}»)
      «f:MESSAGE»(«t:STATUS» «s:"Using system-installed ${«v:util»}"»)
    «k:ENDIF»(«v:CMAKE_USE_SYSTEM_»«D:${»«v:util»«D:}»)
  «k:ENDFOREACH»(«v:util»)

  «x:# Inform utility library header wrappers whether to use system versions.
»  «f:CONFIGURE_FILE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/Utilities/cmThirdParty.h.in
    «D:${»«v:CMake_BINARY_DIR»«D:}»/Utilities/cmThirdParty.h
    «t:@ONLY»)

«k:ENDMACRO»(«f:CMAKE_HANDLE_SYSTEM_LIBRARIES»)




«f:SET»(«v:CMAKE_BUILD_ON_VISUAL_STUDIO» 0)
«k:IF»(«v:WIN32» «t:AND» «t:NOT» «v:UNIX» «t:AND» «t:NOT» «v:BORLAND» «t:AND» «t:NOT» «v:MINGW» )
  «f:SET»(«v:CMAKE_BUILD_ON_VISUAL_STUDIO» 1)
«k:ENDIF»(«v:WIN32» «t:AND» «t:NOT» «v:UNIX» «t:AND» «t:NOT» «v:BORLAND» «t:AND» «t:NOT» «v:MINGW» )


«x:#-----------------------------------------------------------------------
# a macro to determine the generator and ctest executable to use
# for testing. Simply to improve readability of the main script.
#-----------------------------------------------------------------------
»«k:MACRO»(«f:CMAKE_SETUP_TESTING»)
  «k:IF» («t:NOT» «v:DART_ROOT»)
    «f:SET»(«v:MAKEPROGRAM» «D:${»«v:CMAKE_MAKE_PROGRAM»«D:}»)
  «k:ENDIF» («t:NOT» «v:DART_ROOT»)
  
  «k:IF»(«v:BUILD_TESTING»)
    «f:SET»(«v:CMAKE_TEST_GENERATOR» «s:""» «t:CACHE» «t:STRING» 
      «s:"Generator used when running tests"»)
    «f:SET»(«v:CMAKE_TEST_MAKEPROGRAM» «s:""» «t:CACHE» «t:FILEPATH» 
      «s:"Generator used when running tests"»)
    «k:IF»(«t:NOT» «v:CMAKE_TEST_GENERATOR»)
      «f:SET»(«v:CMAKE_TEST_GENERATOR» «s:"${«v:CMAKE_GENERATOR»}"»)
      «f:SET»(«v:CMAKE_TEST_MAKEPROGRAM» «s:"${«v:MAKEPROGRAM»}"»)
    «k:ELSE»(«t:NOT» «v:CMAKE_TEST_GENERATOR»)
      «f:SET»(«v:CMAKE_TEST_DIFFERENT_GENERATOR» «c:TRUE»)
    «k:ENDIF»(«t:NOT» «v:CMAKE_TEST_GENERATOR»)
    
    «x:# Are we testing with the MSVC compiler?
»    «f:SET»(«v:CMAKE_TEST_MSVC» 0)
    «k:IF»(«v:MSVC» «t:AND» «t:NOT» «v:CMAKE_TEST_DIFFERENT_GENERATOR»)
      «f:SET»(«v:CMAKE_TEST_MSVC» 1)
    «k:ELSE»(«v:MSVC» «t:AND» «t:NOT» «v:CMAKE_TEST_DIFFERENT_GENERATOR»)
      «k:IF»(«s:"${«v:CMAKE_TEST_GENERATOR»}"» «t:MATCHES» «s:"NMake"» «t:OR»
          «s:"${«v:CMAKE_TEST_GENERATOR»}"» «t:MATCHES» «s:"Visual Studio"»)
        «f:SET»(«v:CMAKE_TEST_MSVC» 1)
      «k:ENDIF»(«s:"${«v:CMAKE_TEST_GENERATOR»}"» «t:MATCHES» «s:"NMake"» «t:OR»
        «s:"${«v:CMAKE_TEST_GENERATOR»}"» «t:MATCHES» «s:"Visual Studio"»)
    «k:ENDIF»(«v:MSVC» «t:AND» «t:NOT» «v:CMAKE_TEST_DIFFERENT_GENERATOR»)
    
    «f:SET»(«v:CMAKE_TEST_SYSTEM_LIBRARIES» 0)
    «k:FOREACH»(«v:util» CURL EXPAT XMLRPC ZLIB)
      «k:IF»(«v:CMAKE_USE_SYSTEM_»«D:${»«v:util»«D:}»)
        «f:SET»(«v:CMAKE_TEST_SYSTEM_LIBRARIES» 1)
      «k:ENDIF»(«v:CMAKE_USE_SYSTEM_»«D:${»«v:util»«D:}»)
    «k:ENDFOREACH»(«v:util»)
    
    «x:# This variable is set by cmake, however to
»    «x:# test cmake we want to make sure that
»    «x:# the ctest from this cmake is used for testing
»    «x:# and not the ctest from the cmake building and testing
»    «x:# cmake.
»    «f:SET»(«v:CMAKE_CTEST_COMMAND» «s:"${«v:CMake_BIN_DIR»}/ctest"»)
    «f:SET»(«v:CMAKE_CMAKE_COMMAND» «s:"${«v:CMake_BIN_DIR»}/cmake"»)
    «f:SET»(«v:CMAKE_CPACK_COMMAND» «s:"${«v:CMake_BIN_DIR»}/cpack"»)
  «k:ENDIF»(«v:BUILD_TESTING»)

  «x:# configure some files for testing
»  «f:CONFIGURE_FILE»(«s:"${«v:CMAKE_CURRENT_SOURCE_DIR»}/Templates/CTestScript.cmake.in"»
    «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/CTestScript.cmake"»
    «t:@ONLY»)
  «f:CONFIGURE_FILE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/Tests/.NoDartCoverage
    «D:${»«v:CMake_BINARY_DIR»«D:}»/Tests/.NoDartCoverage)
  «f:CONFIGURE_FILE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/Tests/.NoDartCoverage
    «D:${»«v:CMake_BINARY_DIR»«D:}»/Modules/.NoDartCoverage)
  «f:CONFIGURE_FILE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/CTestCustom.cmake.in
    «D:${»«v:CMake_BINARY_DIR»«D:}»/CTestCustom.cmake «t:@ONLY»)
  «f:CONFIGURE_FILE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/CTestCustom.ctest.in
    «D:${»«v:CMake_BINARY_DIR»«D:}»/CTestCustom.ctest «t:@ONLY»)
  «k:IF»(«v:BUILD_TESTING» «t:AND» «v:DART_ROOT»)
    «f:CONFIGURE_FILE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/CMakeLogo.gif 
      «D:${»«v:CMake_BINARY_DIR»«D:}»/Testing/HTML/TestingResults/Icons/Logo.gif «t:COPYONLY»)
  «k:ENDIF»(«v:BUILD_TESTING» «t:AND» «v:DART_ROOT»)
  «f:MARK_AS_ADVANCED»(«v:DART_ROOT»)
  «f:MARK_AS_ADVANCED»(«v:CURL_TESTING»)
«k:ENDMACRO»(«f:CMAKE_SETUP_TESTING»)



«x:#-----------------------------------------------------------------------
# a macro to build the utilities used by CMake
# Simply to improve readability of the main script.
#-----------------------------------------------------------------------
»«k:MACRO» («f:CMAKE_BUILD_UTILITIES»)
  «x:#---------------------------------------------------------------------
»  «x:# Create the kwsys library for CMake.
»  «f:SET»(«v:KWSYS_NAMESPACE» cmsys)
  «f:SET»(«v:KWSYS_USE_SystemTools» 1)
  «f:SET»(«v:KWSYS_USE_Directory» 1)
  «f:SET»(«v:KWSYS_USE_RegularExpression» 1)
  «f:SET»(«v:KWSYS_USE_Base64» 1)
  «f:SET»(«v:KWSYS_USE_MD5» 1)
  «f:SET»(«v:KWSYS_USE_Process» 1)
  «f:SET»(«v:KWSYS_USE_CommandLineArguments» 1)
  «f:SET»(«v:KWSYS_HEADER_ROOT» «D:${»«v:CMake_BINARY_DIR»«D:}»/Source)
  «f:SET»(«v:KWSYS_INSTALL_DOC_DIR» «s:"${«v:CMake_DOC_DEST»}"»)
  «f:ADD_SUBDIRECTORY»(Source/kwsys)
  
  «x:#---------------------------------------------------------------------
»  «x:# Setup third-party libraries.
»  «x:# Everything in the tree should be able to include files from the
»  «x:# Utilities directory.
»  «f:INCLUDE_DIRECTORIES»(
    «D:${»«v:CMake_BINARY_DIR»«D:}»/Utilities
    «D:${»«v:CMake_SOURCE_DIR»«D:}»/Utilities
    )
  
  «x:# check for the use of system libraries versus builtin ones
»  «x:# (a macro defined in this file)
»  «f:CMAKE_HANDLE_SYSTEM_LIBRARIES»()
  
  «x:#---------------------------------------------------------------------
»  «x:# Build zlib library for Curl, CMake, and CTest.
»  «f:SET»(«v:CMAKE_ZLIB_HEADER» «s:"cm_zlib.h"»)
  «k:IF»(«v:CMAKE_USE_SYSTEM_ZLIB»)
    «f:FIND_PACKAGE»(ZLIB)
    «k:IF»(«t:NOT» «v:ZLIB_FOUND»)
      «f:MESSAGE»(«t:FATAL_ERROR» 
        «s:"CMAKE_USE_SYSTEM_ZLIB is ON but a zlib is not found!"»)
    «k:ENDIF»(«t:NOT» «v:ZLIB_FOUND»)
    «f:SET»(«v:CMAKE_ZLIB_INCLUDES» «D:${»«v:ZLIB_INCLUDE_DIR»«D:}»)
    «f:SET»(«v:CMAKE_ZLIB_LIBRARIES» «D:${»«v:ZLIB_LIBRARIES»«D:}»)
  «k:ELSE»(«v:CMAKE_USE_SYSTEM_ZLIB»)
    «f:SET»(«v:CMAKE_ZLIB_INCLUDES»)
    «f:SET»(«v:CMAKE_ZLIB_LIBRARIES» cmzlib)
    «f:ADD_SUBDIRECTORY»(Utilities/cmzlib)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_ZLIB»)
  
  «x:#---------------------------------------------------------------------
»  «x:# Build Curl library for CTest.
»  «k:IF»(«v:CMAKE_USE_SYSTEM_CURL»)
    «f:FIND_PACKAGE»(CURL)
    «k:IF»(«t:NOT» «v:CURL_FOUND»)
      «f:MESSAGE»(«t:FATAL_ERROR» 
        «s:"CMAKE_USE_SYSTEM_CURL is ON but a curl is not found!"»)
    «k:ENDIF»(«t:NOT» «v:CURL_FOUND»)
    «f:SET»(«v:CMAKE_CURL_INCLUDES» «D:${»«v:CURL_INCLUDE_DIRS»«D:}»)
    «f:SET»(«v:CMAKE_CURL_LIBRARIES» «D:${»«v:CURL_LIBRARIES»«D:}»)
  «k:ELSE»(«v:CMAKE_USE_SYSTEM_CURL»)
    «f:SET»(«v:CURL_SPECIAL_ZLIB_H» «D:${»«v:CMAKE_ZLIB_HEADER»«D:}»)
    «f:SET»(«v:CURL_SPECIAL_LIBZ_INCLUDES» «D:${»«v:CMAKE_ZLIB_INCLUDES»«D:}»)
    «f:SET»(«v:CURL_SPECIAL_LIBZ» «D:${»«v:CMAKE_ZLIB_LIBRARIES»«D:}»)
    «f:OPTION»(«v:CMAKE_BUILD_CURL_SHARED» «s:"Should curl be built shared"» «c:FALSE»)
    «k:IF»(«t:NOT» «v:CMAKE_BUILD_CURL_SHARED»)
      «f:ADD_DEFINITIONS»(-D«c:CURL_STATICLIB»)
    «k:ENDIF»(«t:NOT» «v:CMAKE_BUILD_CURL_SHARED»)
    «f:SET»(«v:CMAKE_CURL_INCLUDES»)
    «f:SET»(«v:CMAKE_CURL_LIBRARIES» cmcurl)
    «k:IF»(«v:CMAKE_TESTS_CDASH_SERVER»)
      «f:SET»(«v:CMAKE_CURL_TEST_URL» «s:"${«v:CMAKE_TESTS_CDASH_SERVER»}/user.php"»)
    «k:ENDIF»(«v:CMAKE_TESTS_CDASH_SERVER»)
    «f:ADD_SUBDIRECTORY»(Utilities/cmcurl)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_CURL»)

  «x:#---------------------------------------------------------------------
»  «x:# Build Compress library for CTest.
»  «f:SET»(«v:CMAKE_COMPRESS_INCLUDES» 
    «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/Utilities/cmcompress"»)
  «f:SET»(«v:CMAKE_COMPRESS_LIBRARIES» «s:"cmcompress"»)
  «f:ADD_SUBDIRECTORY»(Utilities/cmcompress)
  «k:IF»(«v:CMAKE_USE_SYSTEM_BZIP2»)
    «f:FIND_PACKAGE»(BZip2)
  «k:ELSE»()
    «f:SET»(«v:BZIP2_INCLUDE_DIR» 
      «s:"${«v:CMAKE_CURRENT_SOURCE_DIR»}/Utilities/cmbzip2"»)
    «f:SET»(«v:BZIP2_LIBRARIES» cmbzip2)
    «f:ADD_SUBDIRECTORY»(Utilities/cmbzip2)
  «k:ENDIF»()
  «k:IF»(«v:CMAKE_USE_SYSTEM_LIBARCHIVE»)
    «f:FIND_PACKAGE»(libarchive)
    «f:SET»(«v:CMAKE_TAR_LIBRARIES» libarchive)
  «k:ELSE»(«v:CMAKE_USE_SYSTEM_LIBARCHIVE»)
    «f:SET»(«v:HAVE_LIBZ» 1)
    «f:SET»(«v:HAVE_ZLIB_H» 1)
    «f:SET»(«v:ZLIB_INCLUDE_DIR» «D:${»«v:CMAKE_ZLIB_INCLUDES»«D:}»)
    «f:SET»(«v:ZLIB_LIBRARIES» «D:${»«v:CMAKE_ZLIB_LIBRARIES»«D:}»)
    «f:SET»(«v:ZLIB_LIBRARY» «D:${»«v:CMAKE_ZLIB_LIBRARIES»«D:}»)
    «f:SET»(«v:BUILD_ARCHIVE_WITHIN_CMAKE» «c:TRUE»)
    «f:ADD_DEFINITIONS»(-D«c:LIBARCHIVE_STATIC»)
    «f:ADD_SUBDIRECTORY»(Utilities/cmlibarchive)
    «f:SET»(«v:CMAKE_TAR_LIBRARIES» cmlibarchive «D:${»«v:BZIP2_LIBRARIES»«D:}»)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_LIBARCHIVE»)

  «x:#---------------------------------------------------------------------
»  «x:# Build expat library for CMake and CTest.
»  «k:IF»(«v:CMAKE_USE_SYSTEM_EXPAT»)
    «f:FIND_PACKAGE»(EXPAT)
    «k:IF»(«t:NOT» «v:EXPAT_FOUND»)
      «f:MESSAGE»(«t:FATAL_ERROR»
        «s:"CMAKE_USE_SYSTEM_EXPAT is ON but a expat is not found!"»)
    «k:ENDIF»(«t:NOT» «v:EXPAT_FOUND»)
    «f:SET»(«v:CMAKE_EXPAT_INCLUDES» «D:${»«v:EXPAT_INCLUDE_DIRS»«D:}»)
    «f:SET»(«v:CMAKE_EXPAT_LIBRARIES» «D:${»«v:EXPAT_LIBRARIES»«D:}»)
  «k:ELSE»(«v:CMAKE_USE_SYSTEM_EXPAT»)
    «f:SET»(«v:CMAKE_EXPAT_INCLUDES»)
    «f:SET»(«v:CMAKE_EXPAT_LIBRARIES» cmexpat)
    «f:ADD_SUBDIRECTORY»(Utilities/cmexpat)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_EXPAT»)
  
  «x:#---------------------------------------------------------------------
»  «x:# Build XMLRPC library for CMake and CTest.
»  «k:IF»(«v:CTEST_USE_XMLRPC»)
    «f:FIND_PACKAGE»(XMLRPC «t:QUIET» «t:REQUIRED» libwww-client)
    «k:IF»(«t:NOT» «v:XMLRPC_FOUND»)
      «f:MESSAGE»(«t:FATAL_ERROR»
        «s:"CTEST_USE_XMLRPC is ON but xmlrpc is not found!"»)
    «k:ENDIF»(«t:NOT» «v:XMLRPC_FOUND»)
    «f:SET»(«v:CMAKE_XMLRPC_INCLUDES» «D:${»«v:XMLRPC_INCLUDE_DIRS»«D:}»)
    «f:SET»(«v:CMAKE_XMLRPC_LIBRARIES» «D:${»«v:XMLRPC_LIBRARIES»«D:}»)
  «k:ENDIF»(«v:CTEST_USE_XMLRPC»)
  
  «x:#---------------------------------------------------------------------
»  «x:# Use curses?
»  «k:IF» («v:UNIX»)
    «x:# there is a bug in the Syllable libraries which makes linking ccmake fail, Alex
»    «k:IF»(«t:NOT» «s:"${«v:CMAKE_SYSTEM_NAME»}"» «t:MATCHES» syllable)
      «f:SET»(«v:CURSES_NEED_NCURSES» «c:TRUE»)
      «f:FIND_PACKAGE»(Curses «t:QUIET»)
      «k:IF» («v:CURSES_LIBRARY»)
        «f:OPTION»(«v:BUILD_CursesDialog» «s:"Build the CMake Curses Dialog ccmake"» «c:ON»)
      «k:ELSE» («v:CURSES_LIBRARY»)
        «f:MESSAGE»(«s:"Curses libraries were not found. Curses GUI for CMake will not be built."»)
        «f:SET»(«v:BUILD_CursesDialog» 0)
      «k:ENDIF» («v:CURSES_LIBRARY»)
    «k:ELSE»(«t:NOT» «s:"${«v:CMAKE_SYSTEM_NAME»}"» «t:MATCHES» syllable)
      «f:SET»(«v:BUILD_CursesDialog» 0)
    «k:ENDIF»(«t:NOT» «s:"${«v:CMAKE_SYSTEM_NAME»}"» «t:MATCHES» syllable)
  «k:ELSE» («v:UNIX»)
    «f:SET»(«v:BUILD_CursesDialog» 0)
  «k:ENDIF» («v:UNIX»)
  «k:IF»(«v:BUILD_CursesDialog»)
    «f:ADD_SUBDIRECTORY»(Source/CursesDialog/form)
  «k:ENDIF»(«v:BUILD_CursesDialog»)
«k:ENDMACRO» («f:CMAKE_BUILD_UTILITIES»)



«x:#-----------------------------------------------------------------------
# The main section of the CMakeLists file
#
#-----------------------------------------------------------------------
# The CMake version number.
»«f:SET»(«v:CMake_VERSION_MAJOR» 2)
«f:SET»(«v:CMake_VERSION_MINOR» 8)
«f:SET»(«v:CMake_VERSION_PATCH» 2)
«f:SET»(«v:CMake_VERSION_TWEAK» 0)
«x:#SET(CMake_VERSION_RC 4)
»
«x:# Releases define a tweak level.
»«k:IF»(«t:DEFINED» «v:CMake_VERSION_TWEAK»)
  «f:SET»(«v:CMake_VERSION_IS_RELEASE» 1)
  «f:SET»(«v:CMake_VERSION_SOURCE» «s:""»)
«k:ELSE»()
  «f:SET»(«v:CMake_VERSION_IS_RELEASE» 0)

  «x:# Use the date as the tweak level.
»  «k:INCLUDE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/Source/kwsys/kwsysDateStamp.cmake)
  «f:SET»(«v:CMake_VERSION_TWEAK»
    «s:"${«v:KWSYS_DATE_STAMP_YEAR»}${«v:KWSYS_DATE_STAMP_MONTH»}${«v:KWSYS_DATE_STAMP_DAY»}"»
    )

  «k:INCLUDE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/Source/CMakeVersionSource.cmake)
«k:ENDIF»()

«x:# Compute the full version string.
»«f:SET»(«v:CMake_VERSION» «D:${»«v:CMake_VERSION_MAJOR»«D:}».«D:${»«v:CMake_VERSION_MINOR»«D:}».«D:${»«v:CMake_VERSION_PATCH»«D:}»)
«k:IF»(«D:${»«v:CMake_VERSION_TWEAK»«D:}» «t:GREATER» 0)
  «f:SET»(«v:CMake_VERSION» «D:${»«v:CMake_VERSION»«D:}».«D:${»«v:CMake_VERSION_TWEAK»«D:}»)
«k:ENDIF»()
«k:IF»(«v:CMake_VERSION_RC»)
  «f:SET»(«v:CMake_VERSION» «D:${»«v:CMake_VERSION»«D:}»-rc«D:${»«v:CMake_VERSION_RC»«D:}»)
«k:ENDIF»()
«k:IF»(«v:CMake_VERSION_SOURCE»)
  «f:SET»(«v:CMake_VERSION» «D:${»«v:CMake_VERSION»«D:}»-«D:${»«v:CMake_VERSION_SOURCE»«D:}»)
«k:ENDIF»()

«x:# Include the standard Dart testing module
»«f:ENABLE_TESTING»()
«k:INCLUDE» («D:${»«v:CMAKE_ROOT»«D:}»/Modules/Dart.cmake)

«x:# Set up test-time configuration.
»«f:SET_DIRECTORY_PROPERTIES»(«t:PROPERTIES»
  «c:TEST_INCLUDE_FILE» «s:"${«v:CMake_BINARY_DIR»}/Tests/EnforceConfig.cmake"»)

«x:# where to write the resulting executables and libraries
»«f:SET»(«v:BUILD_SHARED_LIBS» «c:OFF»)
«f:SET»(«v:EXECUTABLE_OUTPUT_PATH» «s:""» «t:CACHE» «t:INTERNAL» «s:"No configurable exe dir."»)
«f:SET»(«v:LIBRARY_OUTPUT_PATH» «s:""» «t:CACHE» «t:INTERNAL» 
  «s:"Where to put the libraries for CMake"»)

«x:# The CMake executables usually do not need any rpath to run in the build or
# install tree.
»«f:SET»(«v:CMAKE_SKIP_RPATH» «c:ON» «t:CACHE» «t:INTERNAL» «s:"CMake does not need RPATHs."»)

«f:SET»(«v:CMAKE_DATA_DIR» «s:"/share/cmake-${«v:CMake_VERSION_MAJOR»}.${«v:CMake_VERSION_MINOR»}"» «t:CACHE» «t:STRING»
  «s:"Install location for data (relative to prefix)."»)
«f:SET»(«v:CMAKE_DOC_DIR» «s:"/doc/cmake-${«v:CMake_VERSION_MAJOR»}.${«v:CMake_VERSION_MINOR»}"» «t:CACHE» «t:STRING»
  «s:"Install location for documentation (relative to prefix)."»)
«f:SET»(«v:CMAKE_MAN_DIR» «s:"/man"» «t:CACHE» «t:STRING»
  «s:"Install location for man pages (relative to prefix)."»)
«f:MARK_AS_ADVANCED»(«v:CMAKE_DATA_DIR» «v:CMAKE_DOC_DIR» «v:CMAKE_MAN_DIR»)
«k:IF»(«v:CYGWIN» «t:AND» «t:EXISTS» «s:"${«v:CMAKE_ROOT»}/Modules/CPack.cmake"»)
  «x:# Force doc, data and man dirs to conform to cygwin layout.
»  «f:SET»(«v:CMAKE_DOC_DIR»  «s:"/share/doc/cmake-${«v:CMake_VERSION»}"»)
  «f:SET»(«v:CMAKE_DATA_DIR» «s:"/share/cmake-${«v:CMake_VERSION»}"»)
  «f:SET»(«v:CMAKE_MAN_DIR»  «s:"/share/man"»)
  «x:# let the user know we just forced these values
»  «f:MESSAGE»(«t:STATUS» «s:"Setup for Cygwin packaging"»)
  «f:MESSAGE»(«t:STATUS» «s:"Override cache CMAKE_DOC_DIR = ${«v:CMAKE_DOC_DIR»}"»)
  «f:MESSAGE»(«t:STATUS» «s:"Override cache CMAKE_DATA_DIR = ${«v:CMAKE_DATA_DIR»}"»)
  «f:MESSAGE»(«t:STATUS» «s:"Override cache CMAKE_MAN_DIR = ${«v:CMAKE_MAN_DIR»}"»)
«k:ENDIF»()
«f:STRING»(«t:REGEX» «t:REPLACE» «s:"^/"» «s:""» «v:CMake_DATA_DEST» «s:"${«v:CMAKE_DATA_DIR»}"»)
«f:STRING»(«t:REGEX» «t:REPLACE» «s:"^/"» «s:""» «v:CMake_DOC_DEST» «s:"${«v:CMAKE_DOC_DIR»}"»)

«k:IF»(«v:BUILD_TESTING»)
  «k:INCLUDE»(«D:${»«v:CMake_SOURCE_DIR»«D:}»/Tests/CMakeInstall.cmake)
«k:ENDIF»()

«x:# include special compile flags for some compilers
»«k:INCLUDE»(CompileFlags.cmake)

«x:# no clue why we are testing for this here
»«k:INCLUDE»(CheckSymbolExists)
«f:CHECK_SYMBOL_EXISTS»(unsetenv «s:"stdlib.h"» HAVE_UNSETENV)
«f:CHECK_SYMBOL_EXISTS»(environ «s:"stdlib.h"» HAVE_ENVIRON_NOT_REQUIRE_PROTOTYPE)

«x:# CMAKE_TESTS_CDASH_SERVER: CDash server used by CMake/Tests.
#
# If not defined or "", this variable defaults to the server at
# http://www.cdash.org/CDash.
#
# If set explicitly to "NOTFOUND", curl tests and ctest tests that use
# the network are skipped.
#
# If set to something starting with "http://localhost/", the CDash is
# expected to be an instance of CDash used for CDash testing, pointing
# to a cdash4simpletest database. In these cases, the CDash dashboards
# should be run first.
#
»«k:IF»(«s:"x${«v:CMAKE_TESTS_CDASH_SERVER»}"» «t:STREQUAL» «s:"x"»)
  «f:SET»(«v:CMAKE_TESTS_CDASH_SERVER» «s:"http://www.cdash.org/CDash"»)
«k:ENDIF»(«s:"x${«v:CMAKE_TESTS_CDASH_SERVER»}"» «t:STREQUAL» «s:"x"»)

«x:# build the utilities (a macro defined in this file) 
»«f:CMAKE_BUILD_UTILITIES»()

«x:# On NetBSD ncurses is required, since curses doesn't have the wsyncup()
# function. ncurses is installed via pkgsrc, so the library is in /usr/pkg/lib,
# which isn't in the default linker search path. So without RPATH ccmake 
# doesn't run and the build doesn't succeed since ccmake is executed for
# generating the documentation.
»«k:IF»(«v:BUILD_CursesDialog»)
  «f:GET_FILENAME_COMPONENT»(«v:_CURSES_DIR» «s:"${«v:CURSES_LIBRARY»}"» «t:PATH»)
  «f:SET»(«v:CURSES_NEED_RPATH» «c:FALSE»)
  «k:IF»(«t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/lib"» «t:AND» «t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/usr/lib"» «t:AND» «t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/lib64"» «t:AND» «t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/usr/lib64"»)
    «f:SET»(«v:CURSES_NEED_RPATH» «c:TRUE»)
  «k:ENDIF»(«t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/lib"» «t:AND» «t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/usr/lib"» «t:AND» «t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/lib64"» «t:AND» «t:NOT» «s:"${«v:_CURSES_DIR»}"» «t:STREQUAL» «s:"/usr/lib64"»)
«k:ENDIF»(«v:BUILD_CursesDialog»)

«k:IF»(«v:BUILD_QtDialog»)
  «k:IF»(«v:APPLE»)
    «f:SET»(«v:CMAKE_BUNDLE_NAME»
      «s:"CMake ${«v:CMake_VERSION_MAJOR»}.${«v:CMake_VERSION_MINOR»}-${«v:CMake_VERSION_PATCH»}"»)
    «f:SET»(«v:CMAKE_BUNDLE_LOCATION» «s:"${«v:CMAKE_INSTALL_PREFIX»}"»)
    «x:# make sure CMAKE_INSTALL_PREFIX ends in /
»    «f:STRING»(«t:LENGTH» «s:"${«v:CMAKE_INSTALL_PREFIX»}"» «v:LEN»)
    «f:MATH»(«t:EXPR» «v:LEN» «s:"${«v:LEN»} -1"» )
    «f:STRING»(«t:SUBSTRING» «s:"${«v:CMAKE_INSTALL_PREFIX»}"» «D:${»«v:LEN»«D:}» 1 «v:ENDCH»)
    «k:IF»(«t:NOT» «s:"${«v:ENDCH»}"» «t:STREQUAL» «s:"/"»)
      «f:SET»(«v:CMAKE_INSTALL_PREFIX» «s:"${«v:CMAKE_INSTALL_PREFIX»}/"»)
    «k:ENDIF»(«t:NOT» «s:"${«v:ENDCH»}"» «t:STREQUAL» «s:"/"»)
    «f:SET»(«v:CMAKE_INSTALL_PREFIX» 
      «s:"${«v:CMAKE_INSTALL_PREFIX»}${«v:CMAKE_BUNDLE_NAME»}.app/Contents"»)
  «k:ENDIF»(«v:APPLE»)
  
  «f:SET»(«v:QT_NEED_RPATH» «c:FALSE»)
  «k:IF»(«t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/lib"» «t:AND» «t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/usr/lib"» «t:AND» «t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/lib64"» «t:AND» «t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/usr/lib64"»)
    «f:SET»(«v:QT_NEED_RPATH» «c:TRUE»)
  «k:ENDIF»(«t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/lib"» «t:AND» «t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/usr/lib"» «t:AND» «t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/lib64"» «t:AND» «t:NOT» «s:"${«v:QT_LIBRARY_DIR»}"» «t:STREQUAL» «s:"/usr/lib64"»)
«k:ENDIF»(«v:BUILD_QtDialog»)


«x:# The same might be true on other systems for other libraries.
# Then only enable RPATH if we have are building at least with cmake 2.4, 
# since this one has much better RPATH features than cmake 2.2.
# The executables are then built with the RPATH for the libraries outside
# the build tree, which is both the build and the install RPATH.
»«k:IF» («v:UNIX»)
  «k:IF»(   «v:CMAKE_USE_SYSTEM_CURL»   «t:OR»  «v:CMAKE_USE_SYSTEM_ZLIB»
        «t:OR»  «v:CMAKE_USE_SYSTEM_EXPAT»  «t:OR»  «v:CTEST_USE_XMLRPC»  «t:OR»  «v:CURSES_NEED_RPATH»  «t:OR»  «v:QT_NEED_RPATH»)
    «f:SET»(«v:CMAKE_SKIP_RPATH» «c:OFF» «t:CACHE» «t:INTERNAL» «s:"CMake built with RPATH."»)
    «f:SET»(«v:CMAKE_INSTALL_RPATH_USE_LINK_PATH» «c:TRUE»)
    «f:SET»(«v:CMAKE_BUILD_WITH_INSTALL_RPATH» «c:TRUE»)
  «k:ENDIF»(«v:CMAKE_USE_SYSTEM_CURL»   «t:OR»  «v:CMAKE_USE_SYSTEM_ZLIB»
        «t:OR»  «v:CMAKE_USE_SYSTEM_EXPAT»  «t:OR»  «v:CTEST_USE_XMLRPC»  «t:OR»  «v:CURSES_NEED_RPATH»  «t:OR»  «v:QT_NEED_RPATH»)
«k:ENDIF» («v:UNIX»)


«x:# add the uninstall support
»«f:CONFIGURE_FILE»(
  «s:"${«v:CMAKE_CURRENT_SOURCE_DIR»}/cmake_uninstall.cmake.in"»
  «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/cmake_uninstall.cmake"»
  «t:@ONLY»)
«f:ADD_CUSTOM_TARGET»(«c:uninstall»
  «s:"${«v:CMAKE_COMMAND»}"» -P «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/cmake_uninstall.cmake"»)

«k:INCLUDE» (CMakeCPack.cmake)

«x:# setup some Testing support (a macro defined in this file)
»«f:CMAKE_SETUP_TESTING»()
«f:CONFIGURE_FILE»(
  «s:"${«v:CMAKE_CURRENT_SOURCE_DIR»}/DartLocal.conf.in"»
  «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/DartLocal.conf"»
  «t:COPYONLY»)

«f:OPTION»(«v:CMAKE_STRICT»   
  «s:"Perform strict testing to record property and variable access. Can be used to report any undefined properties or variables"» «c:OFF»)
«f:MARK_AS_ADVANCED»(«v:CMAKE_STRICT»)


«x:# build the remaining subdirectories
»«f:ADD_SUBDIRECTORY»(Source)
«f:ADD_SUBDIRECTORY»(Utilities)
«f:ADD_SUBDIRECTORY»(Tests)

«x:# add a test
»«f:ADD_TEST»(SystemInformationNew «s:"${«v:CMAKE_CMAKE_COMMAND»}"» 
  --system-information  -G «s:"${«v:CMAKE_TEST_GENERATOR»}"» )

«x:# Install license file as it requires.
»«f:INSTALL»(«t:FILES» Copyright.txt «t:DESTINATION» «D:${»«v:CMake_DOC_DEST»«D:}»)

«x:# Install script directories.
»«f:INSTALL»(
  «t:DIRECTORY» Modules Templates
  «t:DESTINATION» «s:"${«v:CMake_DATA_DEST»}"»
  «t:FILE_PERMISSIONS» OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  «t:DIRECTORY_PERMISSIONS» OWNER_READ OWNER_EXECUTE OWNER_WRITE
                        GROUP_READ GROUP_EXECUTE
                        WORLD_READ WORLD_EXECUTE
  «t:PATTERN» «s:"*.sh*"» «t:PERMISSIONS» OWNER_READ OWNER_EXECUTE OWNER_WRITE
                              GROUP_READ GROUP_EXECUTE
                              WORLD_READ WORLD_EXECUTE
  «t:PATTERN» «s:"CVS"» «t:EXCLUDE»
  )

«x:#-----------------------------------------------------------------------
# End of the main section of the CMakeLists file
#-----------------------------------------------------------------------
»
«x:# As a special case when building CMake itself, CMake 2.8.0 and below
# look up EXECUTABLE_OUTPUT_PATH in the top-level CMakeLists.txt file
# to compute the location of the "cmake" executable.  We set it here
# so that those CMake versions can find it.  We wait until after all
# the add_subdirectory() calls to avoid affecting the subdirectories.
»«f:SET»(«v:EXECUTABLE_OUTPUT_PATH» «D:${»«v:CMake_BIN_DIR»«D:}»)
