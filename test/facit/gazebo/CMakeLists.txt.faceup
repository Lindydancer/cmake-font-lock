«f:cmake_minimum_required»(«t:VERSION» 2.8 «t:FATAL_ERROR»)

«k:if»(«t:COMMAND» «f:CMAKE_POLICY»)
  «f:CMAKE_POLICY»(«t:SET» «c:CMP0003» «t:NEW»)
  «f:CMAKE_POLICY»(«t:SET» «c:CMP0004» «t:NEW»)
«k:endif»(«t:COMMAND» «f:CMAKE_POLICY»)

«f:project» (Gazebo)
«f:string» («t:TOLOWER» «D:${»«v:PROJECT_NAME»«D:}» «v:PROJECT_NAME_LOWER»)

«f:set» («v:GAZEBO_VERSION_NAME» «s:"helium"»)
«f:set» («v:GAZEBO_MAJOR_VERSION» 1)
«f:set» («v:GAZEBO_MINOR_VERSION» 2)
«f:set» («v:GAZEBO_PATCH_VERSION» 6)

«f:set» («v:GAZEBO_VERSION» «D:${»«v:GAZEBO_MAJOR_VERSION»«D:}».«D:${»«v:GAZEBO_MINOR_VERSION»«D:}»)
«f:set» («v:GAZEBO_VERSION_FULL» «D:${»«v:GAZEBO_MAJOR_VERSION»«D:}».«D:${»«v:GAZEBO_MINOR_VERSION»«D:}».«D:${»«v:GAZEBO_PATCH_VERSION»«D:}»)

«f:message» («t:STATUS» «s:"${«v:PROJECT_NAME»} version ${«v:GAZEBO_VERSION_FULL»}"»)

«f:set» («v:gazebo_cmake_dir» «D:${»«v:PROJECT_SOURCE_DIR»«D:}»/cmake «t:CACHE» PATH «s:"Location of CMake scripts"»)

«x:########################################
# Package Creation: 
»«k:include» («D:${»«v:gazebo_cmake_dir»«D:}»/gazebo_cpack.cmake)
«f:set» («v:CPACK_PACKAGE_VERSION» «s:"${«v:GAZEBO_VERSION_FULL»}"»)
«f:set» («v:CPACK_PACKAGE_VERSION_MAJOR» «s:"${«v:GAZEBO_MAJOR_VERSION»}"»)
«f:set» («v:CPACK_PACKAGE_VERSION_MINOR» «s:"${«v:GAZEBO_MINOR_VERSION»}"»)
«f:set» («v:CPACK_PACKAGE_VERSION_PATCH» «s:"${«v:GAZEBO_PATCH_VERSION»}"»)

«k:if» («v:CPACK_GENERATOR»)
  «f:message»(«t:STATUS» «s:"Found CPack generators: ${«v:CPACK_GENERATOR»}"»)

  «f:configure_file»(«s:"${«v:gazebo_cmake_dir»}/cpack_options.cmake.in"» «D:${»«v:GAZEBO_CPACK_CFG_FILE»«D:}» «t:@ONLY»)
  «f:set»(«v:CPACK_PROJECT_CONFIG_FILE» «D:${»«v:GAZEBO_CPACK_CFG_FILE»«D:}»)
  «k:include» (CPack)
«k:endif»()

«x:# If we're configuring only to package source, stop here
»«k:if» («v:PACKAGE_SOURCE_ONLY»)
  «f:message»(«t:WARNING» «s:"Configuration was done in PACKAGE_SOURCE_ONLY mode.  You can build a tarball (make package_source), but nothing else."»)
  «k:return»()
«k:endif»()

«x:# Documentation
»«f:add_subdirectory»(doc)

«x:# If we're configuring only to build docs, stop here
»«k:if» («v:DOC_ONLY»)
  «f:message»(«t:WARNING» «s:"Configuration was done in DOC_ONLY mode.  You can build documentation (make doc), but nothing else."»)
  «k:return»()
«k:endif»()

«f:enable_testing»()

«x:# with -fPIC
»«k:if»(«v:UNIX» «t:AND» «t:NOT» «v:WIN32»)
  «f:set» («v:CMAKE_INSTALL_PREFIX» «s:"/usr"» «t:CACHE» «t:STRING» «s:"Install Prefix"»)
 «f:find_program»(«v:CMAKE_UNAME» uname /bin /usr/bin /usr/local/bin )
 «k:if»(«v:CMAKE_UNAME»)
   «f:exec_program»(uname «t:ARGS» -m «t:OUTPUT_VARIABLE» CMAKE_SYSTEM_PROCESSOR)
   «f:set»(«v:CMAKE_SYSTEM_PROCESSOR» «D:${»«v:CMAKE_SYSTEM_PROCESSOR»«D:}» «t:CACHE» «t:INTERNAL»
     «s:"processor type (i386 and x86_64)"»)
   «k:if»(«v:CMAKE_SYSTEM_PROCESSOR» «t:MATCHES» «s:"x86_64"»)
     «f:ADD_DEFINITIONS»(-fPIC)
   «k:endif»(«v:CMAKE_SYSTEM_PROCESSOR» «t:MATCHES» «s:"x86_64"»)
 «k:endif»(«v:CMAKE_UNAME»)
«k:endif»()

«f:set» («v:CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE» «c:ON»)


«x:# developer's option to cache PKG_CONFIG_PATH and
# LD_LIBRARY_PATH for local installs
»«k:if»(«v:PKG_CONFIG_PATH»)
  «f:set» («v:ENV»«D:{»«c:PKG_CONFIG_PATH»«D:}» «D:${»«v:PKG_CONFIG_PATH»«D:}»:«D:$»«v:ENV»«D:{»«c:PKG_CONFIG_PATH»«D:}»)
«k:endif»()
«k:if»(«v:LD_LIBRARY_PATH»)
  «f:set» («v:ENV»«D:{»«c:LD_LIBRARY_PATH»«D:}» «D:${»«v:LD_LIBRARY_PATH»«D:}»:«D:$»«v:ENV»«D:{»«c:LD_LIBRARY_PATH»«D:}»)
«k:endif»()


«f:set» («v:INCLUDE_INSTALL_DIR» «s:"include/gazebo-${«v:GAZEBO_VERSION»}/gazebo"») 
«f:set» («v:LIB_INSTALL_DIR» «s:"lib"» «t:CACHE» «t:STRING» «s:"Installation directory for libraries (relative to CMAKE_INSTALL_PREFIX)"») 
«f:set» («v:BIN_INSTALL_DIR» «s:"bin"» «t:CACHE» «t:STRING» «s:"Installation directory for binaries (relative to CMAKE_INSTALL_PREFIX)"») 


«f:set» («v:USE_FULL_RPATH» «c:OFF» «t:CACHE» «t:BOOL» «s:"Set to true to enable full rpath"»)

«k:if» («v:USE_FULL_RPATH»)
  «x:# use, i.e. don't skip the full RPATH for the build tree
»  «f:set»(«v:CMAKE_SKIP_BUILD_RPATH»  «c:FALSE»)
  
  «x:# when building, don't use the install RPATH already
»  «x:# (but later on when installing)
»  «f:set»(«v:CMAKE_BUILD_WITH_INSTALL_RPATH» «c:FALSE») 
  
  «f:set»(«v:CMAKE_INSTALL_RPATH» «s:"${«v:CMAKE_INSTALL_PREFIX»}/${«v:LIB_INSTALL_DIR»}"»)
  
  «x:# add the automatically determined parts of the RPATH
»  «x:# which point to directories outside the build tree to the install RPATH
»  «f:set»(«v:CMAKE_INSTALL_RPATH_USE_LINK_PATH» «c:TRUE»)
  
  «x:# the RPATH to be used when installing, but only if its not a system directory
»  «f:list»(«t:FIND» «v:CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES» «s:"${«v:CMAKE_INSTALL_PREFIX»}/${«v:LIB_INSTALL_DIR»}"» «v:isSystemDir»)
  «k:if»(«s:"${«v:isSystemDir»}"» «t:STREQUAL» «s:"-1"»)
    «f:set»(«v:CMAKE_INSTALL_RPATH» «s:"${«v:CMAKE_INSTALL_PREFIX»}/${«v:LIB_INSTALL_DIR»}"»)
  «k:endif»(«s:"${«v:isSystemDir»}"» «t:STREQUAL» «s:"-1"»)
«k:endif»()

«f:set» («v:BUILD_GAZEBO» «c:ON» «t:CACHE» «t:INTERNAL» «s:"Build Gazebo"» «t:FORCE»)
«f:set» («v:build_errors» «s:""» «t:CACHE» «t:INTERNAL» «s:"build errors"» «t:FORCE»)
«f:set» («v:build_warnings» «s:""» «t:CACHE» «t:INTERNAL» «s:"build warnings"» «t:FORCE»)


«f:set» («v:MIN_OGRE_VERSION» 1.7.1 «t:CACHE» «t:INTERNAL» «s:"Ogre version requirement"» «t:FORCE»)
«f:set» («v:MIN_BOOST_VERSION» 1.40.0 «t:CACHE» «t:INTERNAL» «s:"Boost min version requirement"» «t:FORCE»)

«f:set» («v:FREEIMAGE_MAJOR_VERSION» 3 «t:CACHE» «t:INTERNAL» «s:"FreeImage major version requirement"» «t:FORCE»)
«f:set» («v:FREEIMAGE_MINOR_VERSION» 9 «t:CACHE» «t:INTERNAL» «s:"FreeImage minor version requirement"» «t:FORCE»)
«f:set» («v:MIN_FREEIMAGE_VERSION» «D:${»«v:FREEIMAGE_MAJOR_VERSION»«D:}».«D:${»«v:FREEIMAGE_MINOR_VERSION»«D:}».0 «t:CACHE» «t:INTERNAL» «s:"FreeImage version requirement"» «t:FORCE»)

«k:include» («D:${»«v:gazebo_cmake_dir»«D:}»/DissectVersion.cmake)

«x:#####################################
# Build type cflags
»«f:set» («v:CMAKE_C_FLAGS_ALL» «s:" -Wall -Wextra -Wno-long-long -Wno-unused-value -Wno-unused-value -Wno-unused-value -Wno-unused-value -Wfloat-equal -Wshadow -Winit-self -Wswitch-default -Wmissing-include-dirs -pedantic"» «t:CACHE» «t:INTERNAL» «s:"General C Flags"»)


«x:#####################################
# Build type link flags
»«f:set» («v:CMAKE_LINK_FLAGS_RELEASE» «s:" "» «t:CACHE» «t:INTERNAL» «s:"Link flags fro release"» «t:FORCE»)
«f:set» («v:CMAKE_LINK_FLAGS_DEBUG» «s:" "» «t:CACHE» «t:INTERNAL» «s:"Link flags for debug"» «t:FORCE»)
«f:set» («v:CMAKE_LINK_FLAGS_PROFILE» «s:" -pg"» «t:CACHE» «t:INTERNAL» «s:"Link flags for profile"» «t:FORCE»)
«f:set» («v:CMAKE_LINK_FLAGS_CHECK» «s:" --coverage"» «t:CACHE» «t:INTERNAL» «s:"Link flags for static code checking"» «t:FORCE»)

«f:message» («t:STATUS» «s:"\n\n====== Finding 3rd Party Packages ======"»)
«k:include» («D:${»«v:gazebo_cmake_dir»«D:}»/SearchForStuff.cmake)
«f:message» («t:STATUS» «s:"----------------------------------------\n"»)

«k:if» («v:SSE2_FOUND»)
  «f:set» («v:CMAKE_C_FLAGS_ALL» «s:"${«v:CMAKE_C_FLAGS_ALL»} -msse -msse2 -mfpmath=sse"»)
«k:endif»()
«k:if» («v:SSE3_FOUND»)
  «f:set» («v:CMAKE_C_FLAGS_ALL» «s:"${«v:CMAKE_C_FLAGS_ALL»} -msse3"»)
«k:endif»()
«k:if» («v:SSSE3_FOUND»)
  «f:set» («v:CMAKE_C_FLAGS_ALL» «s:"${«v:CMAKE_C_FLAGS_ALL»} -mssse3"»)
«k:endif»()

«k:if» («v:ENABLE_SSE4»)
  «f:message»(«t:STATUS» «s:"\nSSE4 will be enabled if system supports it.\n"»)
  «k:if» («v:SSE4_1_FOUND»)
    «f:set» («v:CMAKE_C_FLAGS_ALL» «s:"${«v:CMAKE_C_FLAGS_ALL»} -msse4.1"»)
  «k:endif»()
  «k:if» («v:SSE4_2_FOUND»)
    «f:set» («v:CMAKE_C_FLAGS_ALL» «s:"${«v:CMAKE_C_FLAGS_ALL»} -msse4.2"»)
  «k:endif»()
«k:else»()
  «f:message»(«t:STATUS» «s:"\nSSE4 disabled.\n"»)
«k:endif»()

«f:set» («v:CMAKE_C_FLAGS_RELEASE» «s:" -s -O2 -DNDEBUG ${«v:CMAKE_C_FLAGS_ALL»}"» «t:CACHE» «t:INTERNAL» «s:"C Flags for release"» «t:FORCE»)
«f:set» («v:CMAKE_CXX_FLAGS_RELEASE» «D:${»«v:CMAKE_C_FLAGS_RELEASE»«D:}»)

«f:set» («v:CMAKE_C_FLAGS_DEBUG» «s:" -ggdb3 ${«v:CMAKE_C_FLAGS_ALL»}"» «t:CACHE» «t:INTERNAL» «s:"C Flags for debug"» «t:FORCE»)
«f:set» («v:CMAKE_CXX_FLAGS_DEBUG» «D:${»«v:CMAKE_C_FLAGS_DEBUG»«D:}»)

«f:set» («v:CMAKE_C_FLAGS_PROFILE» «s:" -fno-omit-frame-pointer -g -pg ${«v:CMAKE_C_FLAGS_ALL»}"» «t:CACHE» «t:INTERNAL» «s:"C Flags for profile"» «t:FORCE»)
«f:set» («v:CMAKE_CXX_FLAGS_PROFILE» «D:${»«v:CMAKE_C_FLAGS_PROFILE»«D:}»)

«f:set» («v:CMAKE_C_FLAGS_CHECK» «s:" -g -O0 -Wformat=2 --coverage -fno-inline ${«v:CMAKE_C_FLAGS_ALL»}"» «t:CACHE» «t:INTERNAL» «s:"C Flags for static code checking"» «t:FORCE»)
«f:set» («v:CMAKE_CXX_FLAGS_CHECK» «s:"${«v:CMAKE_C_FLAGS_CHECK»} -fno-elide-constructors -fno-default-inline -fno-implicit-inline-templates"»)

«x:#####################################
# Set the default build type
»«k:if» («t:NOT» «v:CMAKE_BUILD_TYPE»)
  «f:set» («v:CMAKE_BUILD_TYPE» «s:"RELEASE"» «t:CACHE» «t:STRING» 
    «s:"Choose the type of build, options are: debug release profile check"» «t:FORCE»)
«k:endif» («t:NOT» «v:CMAKE_BUILD_TYPE»)
«f:string»(«t:TOUPPER» «D:${»«v:CMAKE_BUILD_TYPE»«D:}» «v:CMAKE_BUILD_TYPE»)

«x:#####################################
# Set all the global build flags
»«f:set» («v:CMAKE_C_FLAGS» «s:"${«v:CMAKE_C_FLAGS_»${«v:CMAKE_BUILD_TYPE»}}"»)
«f:set» («v:CMAKE_CXX_FLAGS» «s:"${«v:CMAKE_CXX_FLAGS_»${«v:CMAKE_BUILD_TYPE»}}"»)
«f:set» («v:CMAKE_EXE_LINKER_FLAGS» «s:"${«v:CMAKE_LINK_FLAGS_»${«v:CMAKE_BUILD_TYPE»}}"»)
«f:set» («v:CMAKE_SHARED_LINKER_FLAGS» «s:"${«v:CMAKE_LINK_FLAGS_»${«v:CMAKE_BUILD_TYPE»}}"»)
«f:set» («v:CMAKE_MODULE_LINKER_FLAGS» «s:"${«v:CMAKE_LINK_FLAGS_»${«v:CMAKE_BUILD_TYPE»}}"»)

«k:if» («s:"${«v:CMAKE_BUILD_TYPE»}"» «t:STREQUAL» «s:"PROFILE"»)
  «f:set» («v:BUILD_TYPE_PROFILE» «c:TRUE»)
«k:else»()
  «f:set» («v:BUILD_TYPE_PROFILE» «c:FALSE»)
«k:endif»()

«k:if» («s:"${«v:CMAKE_BUILD_TYPE»}"» «t:STREQUAL» «s:"RELEASE"»)
  «f:set» («v:BUILD_TYPE_RELEASE» «c:TRUE»)
«k:else»()
  «f:set» («v:BUILD_TYPE_RELEASE» «c:FALSE»)
«k:endif»()

«k:if» ( «s:"${«v:CMAKE_BUILD_TYPE»}"» «t:STREQUAL» «s:"DEBUG"»)
  «f:set» («v:BUILD_TYPE_DEBUG» «c:TRUE»)
«k:else»()
  «f:set» («v:BUILD_TYPE_DEBUG» «c:FALSE»)
«k:endif»()

«f:message» («t:STATUS» «s:"\n\n====== Configuring 3rd Party Packages ======"»)
«f:add_subdirectory»(deps)
«f:message» («t:STATUS» «s:"----------------------------------------\n"»)

«x:#################################################
# OS Specific initialization
»«k:if» («v:UNIX»)
  «f:gz_setup_unix»()
«k:else» («v:WIN32»)
  «f:gz_setup_windows»()
«k:else» («v:APPLE»)
  «f:gz_setup_apple»()
«k:endif»()

«x:#################################################
# Print warnings and errors
»«k:if» ( «v:build_warnings» )
  «f:message»(«t:STATUS» «s:"BUILD WARNINGS"»)
  «k:foreach» («v:msg» «D:${»«v:build_warnings»«D:}»)
    «f:message»(«t:STATUS» «D:${»«v:msg»«D:}»)
  «k:endforeach» ()
  «f:message»(«t:STATUS» «s:"END BUILD WARNINGS\n"»)
«k:endif» («v:build_warnings»)

«x:########### Add uninstall target ###############
»«f:configure_file»(
  «s:"${«v:CMAKE_CURRENT_SOURCE_DIR»}/cmake/cmake_uninstall.cmake.in"»
  «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/cmake/cmake_uninstall.cmake"»
  IMMEDIATE «t:@ONLY»)
«f:add_custom_target»(«c:uninstall»
  «s:"${«v:CMAKE_COMMAND»}"» -P «s:"${«v:CMAKE_CURRENT_BINARY_DIR»}/cmake/cmake_uninstall.cmake"»)

«k:if» («v:build_errors»)
  «f:message»(«t:STATUS» «s:"BUILD ERRORS: These must be resolved before compiling."»)
  «k:foreach» («v:msg» «D:${»«v:build_errors»«D:}»)
    «f:message»(«t:STATUS» «D:${»«v:msg»«D:}»)
  «k:endforeach» ()
  «f:message»(«t:STATUS» «s:"END BUILD ERRORS\n"»)
  «f:message» («t:FATAL_ERROR» «s:"Errors encountered in build. Please see the BUILD ERRORS above."»)
«k:else» («v:build_errors»)

  «x:########################################
»  «x:# Write the config.h file
»  «f:configure_file» («D:${»«v:gazebo_cmake_dir»«D:}»/gazebo_config.h.in «D:${»«v:PROJECT_BINARY_DIR»«D:}»/gazebo/gazebo_config.h)
  «f:gz_install_includes»(«s:""» «D:${»«v:PROJECT_BINARY_DIR»«D:}»/gazebo/gazebo_config.h)

  «f:configure_file»(«D:${»«v:CMAKE_SOURCE_DIR»«D:}»/cmake/setup.sh.in «D:${»«v:PROJECT_BINARY_DIR»«D:}»/setup.sh «t:@ONLY»)
  «f:install»(«t:FILES» «D:${»«v:CMAKE_CURRENT_BINARY_DIR»«D:}»/setup.sh «t:DESTINATION» «D:${»«v:CMAKE_INSTALL_PREFIX»«D:}»/share/gazebo-«D:${»«v:GAZEBO_VERSION»«D:}»/)
 
  «f:include_directories»(«D:${»«v:PROJECT_SOURCE_DIR»«D:}» «D:${»«v:PROJECT_BINARY_DIR»«D:}»)
  
  «f:message» («t:STATUS» «s:"C Flags:${«v:CMAKE_CXX_FLAGS»}"»)
  «f:message» («t:STATUS» «s:"Build Type: ${«v:CMAKE_BUILD_TYPE»}"»)
  «f:message» («t:STATUS» «s:"Install path: ${«v:CMAKE_INSTALL_PREFIX»}"»)
 

  «k:if» («v:BUILD_GAZEBO»)
    «f:add_subdirectory»(gazebo)
    «f:add_subdirectory»(sdf)
    «f:add_subdirectory»(media)
    «f:add_subdirectory»(test)
    «f:add_subdirectory»(tools)
    «f:add_subdirectory»(plugins)
    «f:add_subdirectory»(interfaces)
  «k:endif» («v:BUILD_GAZEBO»)

  «x:########################################
»  «x:# Make the package config files
»  «f:set» («v:pkgconfig_files» gazebo_ode gazebo_transport gazebo)

  «k:foreach» («v:pkgconfig» «D:${»«v:pkgconfig_files»«D:}»)
    «f:configure_file»(«D:${»«v:CMAKE_SOURCE_DIR»«D:}»/cmake/pkgconfig/«D:${»«v:pkgconfig»«D:}».in «D:${»«v:CMAKE_CURRENT_BINARY_DIR»«D:}»/cmake/pkgconfig/«D:${»«v:pkgconfig»«D:}».pc «t:@ONLY»)
    «f:install»(«t:FILES» «D:${»«v:CMAKE_CURRENT_BINARY_DIR»«D:}»/cmake/pkgconfig/«D:${»«v:pkgconfig»«D:}».pc «t:DESTINATION» «D:${»«v:LIB_INSTALL_DIR»«D:}»/pkgconfig «t:COMPONENT» pkgconfig)
  «k:endforeach»()

  «x:########################################
»  «x:# If present, load platform-specific build hooks.  This system is used,
»  «x:# for example, by the Ubuntu overlay (in the gazebo-release repo), to
»  «x:# arrange for installation of Ubuntu-specific application-launching
»  «x:# configuration.
»  «k:if» («t:EXISTS» «D:${»«v:PROJECT_SOURCE_DIR»«D:}»/cmake/packager-hooks/CMakeLists.txt)
    «f:message»(«t:STATUS» «s:"Loading packager build hooks from cmake/packager-hooks"»)
    «f:add_subdirectory»(cmake/packager-hooks)
  «k:endif»()

  «f:message»(«t:STATUS» «s:"Configuration successful. Type make to compile gazebo"»)
«k:endif»(«v:build_errors»)
